/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ObsidianImageEnhancePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var import_view = require("@codemirror/view");

// src/utils/image-link-utils.ts
function parseImageSyntaxFromLine(lineText) {
  var _a, _b, _c;
  const markdownRegex = /!\[(.*?)?(?:\|(\d+(?:x\d+)?))?\]\(([^)]+)\)/;
  let match = lineText.match(markdownRegex);
  if (match) {
    const altText = match[1] || void 0;
    const dimensionsString = match[2];
    const path = match[3].trim();
    let specifiedWidth;
    let specifiedHeight;
    if (dimensionsString) {
      const dims = dimensionsString.split("x");
      if (dims[0]) {
        specifiedWidth = parseInt(dims[0], 10);
      }
      if (dims.length > 1 && dims[1]) {
        specifiedHeight = parseInt(dims[1], 10);
      }
    }
    return {
      path,
      altText,
      specifiedWidth,
      specifiedHeight,
      originalMatch: match[0],
      startIndexInLine: (_a = match.index) != null ? _a : 0,
      isHtml: false
    };
  }
  const wikilinkRegex = /!\[\[([^|\]]+)(?:\|([^|\]]*))?\]\]/;
  match = lineText.match(wikilinkRegex);
  if (match) {
    const path = match[1].trim();
    const altOrDimensions = match[2];
    let specifiedWidth;
    let specifiedHeight;
    let altText = altOrDimensions;
    if (altOrDimensions) {
      const dimMatch = altOrDimensions.match(/^(\d+)(?:x(\d+))?$/);
      if (dimMatch) {
        if (dimMatch[1]) {
          specifiedWidth = parseInt(dimMatch[1], 10);
        }
        if (dimMatch[2]) {
          specifiedHeight = parseInt(dimMatch[2], 10);
        }
        altText = void 0;
      }
    }
    return {
      path,
      altText,
      specifiedWidth,
      specifiedHeight,
      originalMatch: match[0],
      startIndexInLine: (_b = match.index) != null ? _b : 0,
      isHtml: false
    };
  }
  const htmlImgRegex = /(<img\s+(?:[^>]*?\s+)?src=(?:["']([^"']+)["']|([^>\s]+))(?:\s+[^>]*?\s*alt=(?:["']([^"']*)["']|([^>\s]*)))?(?:\s+[^>]*?\s*style=(?:["']([^"']+)["']|([^>\s]+)))?[^>]*?>)/i;
  const htmlMatch = lineText.match(htmlImgRegex);
  if (htmlMatch) {
    const originalHtmlTag = htmlMatch[0];
    const path = htmlMatch[2] || htmlMatch[3];
    const altText = htmlMatch[4] || htmlMatch[5] || void 0;
    const styleString = htmlMatch[6] || htmlMatch[7] || void 0;
    let specifiedWidth;
    let specifiedHeight;
    let currentZoomP;
    if (styleString) {
      const widthMatch = styleString.match(/width:\s*(\d+)px/i);
      if (widthMatch && widthMatch[1]) {
        specifiedWidth = parseInt(widthMatch[1], 10);
      }
      const heightMatch = styleString.match(/height:\s*(\d+)px/i);
      if (heightMatch && heightMatch[1]) {
        specifiedHeight = parseInt(heightMatch[1], 10);
      }
      const zoomMatch = styleString.match(/zoom:\s*(\d+)%?/i);
      if (zoomMatch && zoomMatch[1]) {
        currentZoomP = parseInt(zoomMatch[1], 10);
      }
    }
    if (path) {
      return {
        path: path.trim(),
        altText: altText ? altText.trim() : void 0,
        specifiedWidth,
        specifiedHeight,
        currentZoomPercent: currentZoomP,
        isHtml: true,
        originalMatch: originalHtmlTag,
        startIndexInLine: (_c = htmlMatch.index) != null ? _c : 0
      };
    }
  }
  return null;
}

// src/main.ts
function getLineInfoFromElement(view, element) {
  let pos;
  if (pos === void 0) {
    try {
      pos = view.posAtDOM(element);
    } catch (e) {
      return null;
    }
  }
  if (pos === null || pos === void 0)
    return null;
  try {
    const line = view.state.doc.lineAt(pos);
    console.log("\u83B7\u53D6\u884C\u4FE1\u606F\u6210\u529F:", line, pos);
    return {
      pos,
      lineText: line.text,
      lineFrom: line.from,
      lineTo: line.to
    };
  } catch (e) {
    console.error("Error getting line text from element position:", pos, e);
    return null;
  }
}
var ObsidianImageEnhancePlugin = class extends import_obsidian.Plugin {
  async onload() {
    console.log("\u56FE\u7247\u589E\u5F3A\u63D2\u4EF6\u52A0\u8F7D\u6210\u529F!");
    this.registerEditorExtension(this.createLivePreviewHoverExtension());
  }
  createLivePreviewHoverExtension() {
    return import_view.ViewPlugin.fromClass(ImageHoverViewPlugin);
  }
  onunload() {
    console.log("\u56FE\u7247\u589E\u5F3A\u63D2\u4EF6\u5378\u8F7D!");
  }
};
var ImageHoverViewPlugin = class {
  // 鼠标按下时，点到图片中心的初始距离
  constructor(view) {
    this.view = view;
    this.lastHoveredImg = null;
    this.activeImgMouseMoveUnlistener = null;
    this.activeImgMouseLeaveUnlistener = null;
    this.activeImgMouseDownUnlistener = null;
    // 新增：用于mousedown事件
    // 拖拽状态相关
    this.isDragging = false;
    this.dragStartX = 0;
    this.dragStartY = 0;
    this.initialImageWidth = 0;
    // 用于百分比缩放计算
    this.initialImageHeight = 0;
    // 用于百分比缩放计算
    this.currentZoomPercent = 100;
    // 当前图片的缩放百分比
    this.lineInfoAtDragStart = null;
    // 拖拽开始时的行信息
    this.draggedImageInfo = null;
    // 拖拽开始时的图片信息
    this.imageCenterX = 0;
    // 图片中心点X坐标
    this.imageCenterY = 0;
    // 图片中心点Y坐标
    this.initialDistanceToCenter = 0;
    this.contentDom = view.contentDOM;
    this.handleContainerMouseMove = this.handleContainerMouseMove.bind(this);
    this.handleContainerMouseLeave = this.handleContainerMouseLeave.bind(this);
    this.handleImageSpecificMouseDown = this.handleImageSpecificMouseDown.bind(this);
    this.handleDocumentMouseMoveWhileDragging = this.handleDocumentMouseMoveWhileDragging.bind(this);
    this.handleDocumentMouseUp = this.handleDocumentMouseUp.bind(this);
    this.contentDom.addEventListener(
      "mousemove",
      this.handleContainerMouseMove
    );
    this.contentDom.addEventListener(
      "mouseleave",
      this.handleContainerMouseLeave
    );
  }
  update(update) {
    if (this.isDragging && update.docChanged) {
      const imgElement = this.lastHoveredImg;
      if (imgElement && !document.body.contains(imgElement)) {
        this.resetDragState();
      } else if (this.lineInfoAtDragStart) {
        try {
          const currentLine = this.view.state.doc.lineAt(
            this.lineInfoAtDragStart.pos
          );
          if (currentLine.text !== this.lineInfoAtDragStart.lineText) {
          }
        } catch (e) {
          this.resetDragState();
        }
      }
    }
  }
  resetDragState() {
    this.isDragging = false;
    document.removeEventListener(
      "mousemove",
      this.handleDocumentMouseMoveWhileDragging
    );
    document.removeEventListener("mouseup", this.handleDocumentMouseUp);
    this.lineInfoAtDragStart = null;
    this.draggedImageInfo = null;
    if (this.lastHoveredImg) {
      this.lastHoveredImg.style.cursor = "default";
    }
  }
  destroy() {
    this.contentDom.removeEventListener(
      "mousemove",
      this.handleContainerMouseMove
    );
    this.contentDom.removeEventListener(
      "mouseleave",
      this.handleContainerMouseLeave
    );
    this.clearActiveImageState();
    document.removeEventListener(
      "mousemove",
      this.handleDocumentMouseMoveWhileDragging
    );
    document.removeEventListener("mouseup", this.handleDocumentMouseUp);
  }
  clearActiveImageState() {
    if (this.lastHoveredImg) {
      this.lastHoveredImg.classList.remove("image-hover-highlight");
      this.lastHoveredImg.style.cursor = "";
      if (this.activeImgMouseMoveUnlistener)
        this.activeImgMouseMoveUnlistener();
      if (this.activeImgMouseLeaveUnlistener)
        this.activeImgMouseLeaveUnlistener();
      if (this.activeImgMouseDownUnlistener)
        this.activeImgMouseDownUnlistener();
      this.activeImgMouseMoveUnlistener = null;
      this.activeImgMouseLeaveUnlistener = null;
      this.activeImgMouseDownUnlistener = null;
      this.lastHoveredImg = null;
    }
    if (this.isDragging) {
      this.resetDragState();
    }
  }
  handleContainerMouseMove(event) {
    if (this.isDragging)
      return;
    const targetElement = event.target;
    let currentTargetIsOurImage = false;
    const imgCheck = targetElement.closest(
      "img, .cm-widgetImage img, .image-embed img, span.cm-image img, figure.image-container img"
    );
    if (imgCheck && imgCheck.nodeName === "IMG" && this.contentDom.contains(imgCheck)) {
      const imgTarget = imgCheck;
      currentTargetIsOurImage = true;
      if (this.lastHoveredImg !== imgTarget) {
        this.clearActiveImageState();
        this.lastHoveredImg = imgTarget;
        imgTarget.classList.add("image-hover-highlight");
        const onImageMouseMove = (e) => this.handleImageSpecificMouseMove(e, imgTarget);
        const onImageMouseLeave = (e) => this.handleImageSpecificMouseLeave(e, imgTarget);
        const onImageMouseDown = (e) => this.handleImageSpecificMouseDown(e, imgTarget);
        imgTarget.addEventListener("mousemove", onImageMouseMove);
        imgTarget.addEventListener("mouseleave", onImageMouseLeave);
        imgTarget.addEventListener("mousedown", onImageMouseDown);
        this.activeImgMouseMoveUnlistener = () => imgTarget.removeEventListener(
          "mousemove",
          onImageMouseMove
        );
        this.activeImgMouseLeaveUnlistener = () => imgTarget.removeEventListener(
          "mouseleave",
          onImageMouseLeave
        );
        this.activeImgMouseDownUnlistener = () => imgTarget.removeEventListener(
          "mousedown",
          onImageMouseDown
        );
      }
    }
    if (!currentTargetIsOurImage && this.lastHoveredImg) {
      if (!this.lastHoveredImg.contains(targetElement)) {
        this.clearActiveImageState();
      }
    }
  }
  handleContainerMouseLeave(event) {
    if (this.isDragging)
      return;
    const relatedTargetIsOutside = !event.relatedTarget || !this.contentDom.contains(event.relatedTarget);
    if (relatedTargetIsOutside) {
      this.clearActiveImageState();
    }
  }
  handleImageSpecificMouseMove(event, imgElement) {
    if (this.isDragging) {
      return;
    }
    const rect = imgElement.getBoundingClientRect();
    const sensitivity = 8;
    const x = event.clientX - rect.left;
    const y = event.clientY - rect.top;
    let cursorStyle = "grab";
    const onLeftEdge = x < sensitivity;
    const onRightEdge = x > rect.width - sensitivity;
    const onTopEdge = y < sensitivity;
    const onBottomEdge = y > rect.height - sensitivity;
    if (onTopEdge && onLeftEdge)
      cursorStyle = "nwse-resize";
    else if (onTopEdge && onRightEdge)
      cursorStyle = "nesw-resize";
    else if (onBottomEdge && onLeftEdge)
      cursorStyle = "nesw-resize";
    else if (onBottomEdge && onRightEdge)
      cursorStyle = "nwse-resize";
    else if (onLeftEdge || onRightEdge)
      cursorStyle = "ew-resize";
    else if (onTopEdge || onBottomEdge)
      cursorStyle = "ns-resize";
    imgElement.style.cursor = cursorStyle;
  }
  handleImageSpecificMouseLeave(event, imgElement) {
    if (!this.isDragging) {
      imgElement.style.cursor = "";
    }
  }
  /**
   * 当在图片上按下鼠标时触发 (已通过 handleContainerMouseMove 添加监听)
   */
  handleImageSpecificMouseDown(event, imgElement) {
    const cursorStyle = imgElement.style.cursor;
    if (cursorStyle && cursorStyle.includes("-resize")) {
      event.preventDefault();
      event.stopPropagation();
      this.lineInfoAtDragStart = getLineInfoFromElement(
        this.view,
        imgElement
      );
      if (this.lineInfoAtDragStart) {
        const { lineText, lineFrom } = this.lineInfoAtDragStart;
        const parsedInfo = parseImageSyntaxFromLine(lineText);
        if (parsedInfo) {
          this.draggedImageInfo = {
            // 初始化 draggedImageInfo
            path: parsedInfo.path,
            altText: parsedInfo.altText,
            sourceWidth: parsedInfo.specifiedWidth,
            sourceHeight: parsedInfo.specifiedHeight
          };
          console.log(
            `\u56FE\u7247\u62D6\u62FD\u51C6\u5907: Path="${this.draggedImageInfo.path}", Type=${parsedInfo.isHtml ? "HTML" : "MD/Wiki"}, W=${parsedInfo.specifiedWidth}, H=${parsedInfo.specifiedHeight}, Zoom=${parsedInfo.currentZoomPercent}`
          );
          if (parsedInfo.specifiedWidth) {
            this.initialImageWidth = parsedInfo.specifiedWidth;
          } else {
            this.initialImageWidth = imgElement.offsetWidth;
          }
          if (!this.initialImageWidth || this.initialImageWidth <= 0)
            this.initialImageWidth = 200;
          const rect = imgElement.getBoundingClientRect();
          this.imageCenterX = rect.left + rect.width / 2;
          this.imageCenterY = rect.top + rect.height / 2;
          this.dragStartX = event.clientX;
          this.dragStartY = event.clientY;
          const initialDxToCenter = event.clientX - this.imageCenterX;
          const initialDyToCenter = event.clientY - this.imageCenterY;
          this.initialDistanceToCenter = Math.sqrt(
            initialDxToCenter * initialDxToCenter + initialDyToCenter * initialDyToCenter
          );
          if (parsedInfo.isHtml) {
            this.currentZoomPercent = parsedInfo.currentZoomPercent !== void 0 ? parsedInfo.currentZoomPercent : 100;
            console.log(
              `\u5904\u7406\u73B0\u6709HTML: Zoom=${this.currentZoomPercent}%, \u7EE7\u627F\u5C3A\u5BF8 W=${this.draggedImageInfo.sourceWidth}, H=${this.draggedImageInfo.sourceHeight}`
            );
          } else {
            this.currentZoomPercent = 100;
            let styleString = "";
            if (this.draggedImageInfo.sourceWidth)
              styleString += `width: ${this.draggedImageInfo.sourceWidth}px; `;
            if (this.draggedImageInfo.sourceHeight)
              styleString += `height: ${this.draggedImageInfo.sourceHeight}px; `;
            styleString += `zoom: ${this.currentZoomPercent}%;`;
            const safeAltText = this.draggedImageInfo.altText ? escapeHtml(this.draggedImageInfo.altText) : "";
            const newImgTag = `<img src="${this.draggedImageInfo.path}" alt="${safeAltText}" style="${styleString.trim()}">`;
            const from = lineFrom + parsedInfo.startIndexInLine;
            const to = from + parsedInfo.originalMatch.length;
            console.log(
              `\u8F6C\u6362MD/Wiki\u4E3AHTML: \u4ECE "${parsedInfo.originalMatch}" \u5230 "${newImgTag}"`
            );
            const tr = this.view.state.update({
              changes: { from, to, insert: newImgTag },
              selection: {
                anchor: this.view.state.selection.main.head
              },
              userEvent: "image.resize.convert"
            });
            this.view.dispatch(tr);
          }
        } else {
          console.warn(
            "Mousedown: \u65E0\u6CD5\u89E3\u6790\u884C\u4E2D\u7684\u4EFB\u4F55\u56FE\u7247\u8BED\u6CD5:",
            lineText
          );
          this.resetDragState();
          return;
        }
      } else {
        console.warn("Mousedown: \u65E0\u6CD5\u83B7\u53D6\u56FE\u7247\u6240\u5728\u884C\u7684\u4FE1\u606F\u3002");
        this.resetDragState();
        return;
      }
      this.isDragging = true;
      document.addEventListener(
        "mousemove",
        this.handleDocumentMouseMoveWhileDragging
      );
      document.addEventListener("mouseup", this.handleDocumentMouseUp);
    }
  }
  /**
   * 当鼠标在整个文档上移动时触发 (仅当 isDragging 为 true 时)
   */
  handleDocumentMouseMoveWhileDragging(event) {
    var _a;
    if (!this.isDragging || !this.lastHoveredImg || !this.lineInfoAtDragStart || !((_a = this.draggedImageInfo) == null ? void 0 : _a.path)) {
      this.resetDragState();
      return;
    }
    event.preventDefault();
    event.stopPropagation();
    const currentMouseX = event.clientX;
    const currentMouseY = event.clientY;
    const dxToCenterCurrent = currentMouseX - this.imageCenterX;
    const dyToCenterCurrent = currentMouseY - this.imageCenterY;
    const currentDistanceToCenter = Math.sqrt(
      dxToCenterCurrent * dxToCenterCurrent + dyToCenterCurrent * dyToCenterCurrent
    );
    const distanceChange = currentDistanceToCenter - this.initialDistanceToCenter;
    const zoomSensitivity = 0.2;
    const zoomDelta = distanceChange * zoomSensitivity;
    let newZoom = Math.round(this.currentZoomPercent + zoomDelta);
    newZoom = Math.max(10, Math.min(newZoom, 500));
    this.lastHoveredImg.style.zoom = `${newZoom}%`;
  }
  /**
   * 当鼠标按键在整个文档上松开时触发 (仅当 isDragging 为 true 时)
   */
  handleDocumentMouseUp(event) {
    if (!this.isDragging || !this.lastHoveredImg || !this.lineInfoAtDragStart || !this.draggedImageInfo) {
      this.resetDragState();
      return;
    }
    event.preventDefault();
    event.stopPropagation();
    const finalZoomMatch = this.lastHoveredImg.style.zoom.match(/(\d+)/);
    let finalZoomPercent = this.currentZoomPercent;
    if (finalZoomMatch && finalZoomMatch[1]) {
      finalZoomPercent = parseInt(finalZoomMatch[1], 10);
    }
    finalZoomPercent = Math.max(10, Math.min(finalZoomPercent, 500));
    console.log(`\u62D6\u62FD\u7ED3\u675F\uFF0C\u6700\u7EC8\u7F29\u653E: ${finalZoomPercent}%`);
    let finalStyleString = "";
    if (this.draggedImageInfo.sourceWidth) {
      finalStyleString += `width: ${this.draggedImageInfo.sourceWidth}px; `;
    }
    if (this.draggedImageInfo.sourceHeight) {
      finalStyleString += `height: ${this.draggedImageInfo.sourceHeight}px; `;
    }
    finalStyleString += `zoom: ${finalZoomPercent}%;`;
    const safeAltTextFinal = this.draggedImageInfo.altText ? escapeHtml(this.draggedImageInfo.altText) : "";
    const newImgTagFinal = `<img src="${this.draggedImageInfo.path}" alt="${safeAltTextFinal}" style="${finalStyleString.trim()}">`;
    const { lineFrom } = this.lineInfoAtDragStart;
    const currentLineContent = this.view.state.doc.lineAt(lineFrom).text;
    const imgTagToReplaceRegex = new RegExp(
      `<img\\s+src=(?:["']${escapeRegExp(
        this.draggedImageInfo.path
      )}["']|${escapeRegExp(this.draggedImageInfo.path)})[^>]*>`,
      // 匹配到标签结束
      "i"
    );
    const matchForUpdate = currentLineContent.match(imgTagToReplaceRegex);
    let fromPos, toPos;
    if (matchForUpdate && matchForUpdate.index !== void 0) {
      fromPos = lineFrom + matchForUpdate.index;
      toPos = fromPos + matchForUpdate[0].length;
    } else {
      console.warn(
        `MouseUp: \u65E0\u6CD5\u5728\u884C\u4E2D\u627E\u5230\u8981\u66F4\u65B0\u7684 <img /> \u6807\u7B7E\u3002\u884C\u5185\u5BB9: "${currentLineContent}", \u671F\u671B\u8DEF\u5F84: ${this.draggedImageInfo.path}`
      );
      const originalSyntaxInfo = parseImageSyntaxFromLine(
        this.lineInfoAtDragStart.lineText
      );
      if (originalSyntaxInfo && originalSyntaxInfo.path === this.draggedImageInfo.path) {
        console.log(
          "MouseUp: \u5C1D\u8BD5\u4F7F\u7528\u539F\u59CBMarkdown/Wikilink\u4F4D\u7F6E\u8FDB\u884C\u66FF\u6362\u3002"
        );
        fromPos = lineFrom + originalSyntaxInfo.startIndexInLine;
        toPos = fromPos + originalSyntaxInfo.originalMatch.length;
      } else {
        this.resetDragState();
        return;
      }
    }
    if (fromPos !== void 0 && toPos !== void 0) {
      const tr = this.view.state.update({
        changes: { from: fromPos, to: toPos, insert: newImgTagFinal },
        selection: { anchor: this.view.state.selection.main.head },
        userEvent: "image.resize.update"
      });
      this.view.dispatch(tr);
      console.log(
        `\u56FE\u7247 "${this.draggedImageInfo.path}" \u6837\u5F0F\u5DF2\u66F4\u65B0: ${finalStyleString.trim()}`
      );
    }
    this.resetDragState();
  }
};
function escapeHtml(unsafe) {
  return unsafe.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
}
function escapeRegExp(string) {
  return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
}
//# sourceMappingURL=data:application/json;base64,
