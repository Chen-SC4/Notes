/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ObsidianImageEnhancePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var import_view = require("@codemirror/view");

// src/utils/image-link-utils.ts
function parseMarkdown(lineText) {
  var _a;
  const markdownRegex = /!\[(.*?)?(?:\|(\d+(?:x\d+)?))?\]\(([^)]+)\)/;
  const match = lineText.match(markdownRegex);
  if (match) {
    const altText = match[1] || void 0;
    const dimensionsString = match[2];
    const path = match[3].trim();
    let specifiedWidth;
    let specifiedHeight;
    if (dimensionsString) {
      const dims = dimensionsString.split("x");
      if (dims[0]) {
        specifiedWidth = parseInt(dims[0], 10);
      }
      if (dims.length > 1 && dims[1]) {
        specifiedHeight = parseInt(dims[1], 10);
      }
    }
    return {
      path,
      altText,
      specifiedWidth,
      specifiedHeight,
      originalMatch: match[0],
      startIndexInLine: (_a = match.index) != null ? _a : 0,
      isHtml: false
    };
  }
  return null;
}
function parseWikilink(lineText) {
  var _a;
  const wikilinkRegex = /!\[\[([^|\]]+)(?:\|([^|\]]*))?\]\]/;
  const match = lineText.match(wikilinkRegex);
  if (match) {
    const path = match[1].trim();
    const altOrDimensions = match[2];
    let specifiedWidth;
    let specifiedHeight;
    let altText = altOrDimensions;
    if (altOrDimensions) {
      const dimMatch = altOrDimensions.match(/^(\d+)(?:x(\d+))?$/);
      if (dimMatch) {
        if (dimMatch[1]) {
          specifiedWidth = parseInt(dimMatch[1], 10);
        }
        if (dimMatch[2]) {
          specifiedHeight = parseInt(dimMatch[2], 10);
        }
        altText = void 0;
      }
    }
    return {
      path,
      altText,
      specifiedWidth,
      specifiedHeight,
      originalMatch: match[0],
      startIndexInLine: (_a = match.index) != null ? _a : 0,
      isHtml: false
    };
  }
  return null;
}
function parseHtml(lineText) {
  var _a;
  const htmlImgRegex = /(<img\s+(?:[^>]*?\s+)?src=(?:["']([^"']+)["']|([^>\s]+))(?:\s+[^>]*?\s*alt=(?:["']([^"']*)["']|([^>\s]*)))?(?:\s+[^>]*?\s*style=(?:["']([^"']+)["']|([^>\s]+)))?[^>]*?>)/i;
  const htmlMatch = lineText.match(htmlImgRegex);
  if (htmlMatch) {
    const originalHtmlTag = htmlMatch[0];
    const path = htmlMatch[2] || htmlMatch[3];
    const altText = htmlMatch[4] || htmlMatch[5] || void 0;
    const styleString = htmlMatch[6] || htmlMatch[7] || void 0;
    let specifiedWidth;
    let specifiedHeight;
    let currentZoomP;
    if (styleString) {
      const widthMatch = styleString.match(/width:\s*(\d+)px/i);
      if (widthMatch && widthMatch[1]) {
        specifiedWidth = parseInt(widthMatch[1], 10);
      }
      const heightMatch = styleString.match(/height:\s*(\d+)px/i);
      if (heightMatch && heightMatch[1]) {
        specifiedHeight = parseInt(heightMatch[1], 10);
      }
      const zoomMatch = styleString.match(/zoom:\s*(\d+)%?/i);
      if (zoomMatch && zoomMatch[1]) {
        currentZoomP = parseInt(zoomMatch[1], 10);
      }
    }
    if (path) {
      return {
        path: path.trim(),
        altText: altText ? altText.trim() : void 0,
        specifiedWidth,
        specifiedHeight,
        currentZoomPercent: currentZoomP,
        isHtml: true,
        originalMatch: originalHtmlTag,
        startIndexInLine: (_a = htmlMatch.index) != null ? _a : 0
      };
    }
  }
  return null;
}
function parseImageSyntaxFromLine(lineText) {
  let result = parseMarkdown(lineText);
  if (result)
    return result;
  result = parseWikilink(lineText);
  if (result)
    return result;
  return parseHtml(lineText);
}
function escapeHtml(unsafe) {
  return unsafe.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
}
function escapeRegExp(string) {
  return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
}
function getLineInfoFromElement(view, element) {
  let pos;
  if (pos === void 0) {
    try {
      pos = view.posAtDOM(element);
    } catch (e) {
      return null;
    }
  }
  if (pos === null || pos === void 0)
    return null;
  try {
    const line = view.state.doc.lineAt(pos);
    console.log("Successfully got line info:", line, pos);
    return {
      pos,
      lineText: line.text,
      lineFrom: line.from,
      lineTo: line.to
    };
  } catch (e) {
    console.error("Error getting line text from element position:", pos, e);
    return null;
  }
}

// src/image-hover-controller.ts
var ImageHoverController = class {
  constructor(view, contentDom, resizeController) {
    this.view = view;
    this.contentDom = contentDom;
    this.resizeController = resizeController;
    this.lastHoveredImg = null;
    this.activeImgMouseMoveUnlistener = null;
    this.activeImgMouseLeaveUnlistener = null;
    this.activeImgMouseDownUnlistener = null;
    this.handleImageSpecificMouseMove = this.handleImageSpecificMouseMove.bind(this);
    this.handleImageSpecificMouseLeave = this.handleImageSpecificMouseLeave.bind(this);
    this.handleImageSpecificMouseDown = this.handleImageSpecificMouseDown.bind(this);
  }
  getLastHoveredImg() {
    return this.lastHoveredImg;
  }
  handleContainerMouseMove(event) {
    if (this.resizeController.getIsDragging())
      return;
    const targetElement = event.target;
    let currentTargetIsOurImage = false;
    const imgCheck = targetElement.closest(
      "img, .cm-widgetImage img, .image-embed img, span.cm-image img, figure.image-container img"
    );
    if (imgCheck && imgCheck.nodeName === "IMG" && this.contentDom.contains(imgCheck)) {
      const imgTarget = imgCheck;
      currentTargetIsOurImage = true;
      if (this.lastHoveredImg !== imgTarget) {
        this.clearActiveImageState();
        this.lastHoveredImg = imgTarget;
        imgTarget.classList.add("image-hover-highlight");
        imgTarget.addEventListener(
          "mousemove",
          this.handleImageSpecificMouseMove
        );
        imgTarget.addEventListener(
          "mouseleave",
          this.handleImageSpecificMouseLeave
        );
        imgTarget.addEventListener(
          "mousedown",
          this.handleImageSpecificMouseDown
        );
        this.activeImgMouseMoveUnlistener = () => imgTarget.removeEventListener(
          "mousemove",
          this.handleImageSpecificMouseMove
        );
        this.activeImgMouseLeaveUnlistener = () => imgTarget.removeEventListener(
          "mouseleave",
          this.handleImageSpecificMouseLeave
        );
        this.activeImgMouseDownUnlistener = () => imgTarget.removeEventListener(
          "mousedown",
          this.handleImageSpecificMouseDown
        );
      }
    }
    if (!currentTargetIsOurImage && this.lastHoveredImg) {
      if (!this.lastHoveredImg.contains(targetElement)) {
        this.clearActiveImageState();
      }
    }
  }
  handleContainerMouseLeave(event) {
    if (this.resizeController.getIsDragging())
      return;
    const relatedTargetIsOutside = !event.relatedTarget || !this.contentDom.contains(event.relatedTarget);
    if (relatedTargetIsOutside) {
      this.clearActiveImageState();
    }
  }
  handleImageSpecificMouseMove(event) {
    const imgElement = event.currentTarget;
    if (this.resizeController.getIsDragging()) {
      return;
    }
    const rect = imgElement.getBoundingClientRect();
    const sensitivity = 8;
    const x = event.clientX - rect.left;
    const y = event.clientY - rect.top;
    let cursorStyle = "grab";
    const onLeftEdge = x < sensitivity;
    const onRightEdge = x > rect.width - sensitivity;
    const onTopEdge = y < sensitivity;
    const onBottomEdge = y > rect.height - sensitivity;
    if (onTopEdge && onLeftEdge)
      cursorStyle = "nwse-resize";
    else if (onTopEdge && onRightEdge)
      cursorStyle = "nesw-resize";
    else if (onBottomEdge && onLeftEdge)
      cursorStyle = "nesw-resize";
    else if (onBottomEdge && onRightEdge)
      cursorStyle = "nwse-resize";
    else if (onLeftEdge || onRightEdge)
      cursorStyle = "ew-resize";
    else if (onTopEdge || onBottomEdge)
      cursorStyle = "ns-resize";
    imgElement.style.cursor = cursorStyle;
  }
  handleImageSpecificMouseLeave(event) {
    const imgElement = event.currentTarget;
    if (!this.resizeController.getIsDragging()) {
      imgElement.style.cursor = "";
    }
  }
  handleImageSpecificMouseDown(event) {
    const imgElement = event.currentTarget;
    const cursorStyle = imgElement.style.cursor;
    if (cursorStyle && cursorStyle.includes("-resize")) {
      const lineInfo = getLineInfoFromElement(this.view, imgElement);
      if (!lineInfo) {
        return;
      }
      const parsedInfo = parseImageSyntaxFromLine(lineInfo.lineText);
      if (!parsedInfo) {
        return;
      }
      this.resizeController.startResize(
        event,
        imgElement,
        lineInfo,
        parsedInfo
      );
    }
  }
  clearActiveImageState() {
    if (this.lastHoveredImg) {
      this.lastHoveredImg.classList.remove("image-hover-highlight");
      this.lastHoveredImg.style.cursor = "";
      if (this.activeImgMouseMoveUnlistener)
        this.activeImgMouseMoveUnlistener();
      if (this.activeImgMouseLeaveUnlistener)
        this.activeImgMouseLeaveUnlistener();
      if (this.activeImgMouseDownUnlistener)
        this.activeImgMouseDownUnlistener();
      this.activeImgMouseMoveUnlistener = null;
      this.activeImgMouseLeaveUnlistener = null;
      this.activeImgMouseDownUnlistener = null;
      this.lastHoveredImg = null;
    }
    if (this.resizeController.getIsDragging()) {
      this.resizeController.resetState();
    }
  }
  destroy() {
    this.clearActiveImageState();
  }
};

// src/image-resize-controller.ts
var ImageResizeController = class {
  // 当前正在操作的图片元素
  constructor(view) {
    this.view = view;
    this.isDragging = false;
    this.initialImageWidth = 0;
    this.initialImageHeight = 0;
    this.currentZoomPercent = 100;
    this.lineInfoAtDragStart = null;
    this.draggedImageInfo = null;
    this.imageCenterX = 0;
    this.imageCenterY = 0;
    this.initialDistanceToCenter = 0;
    this.activeImgElement = null;
    this.handleDocumentMouseMove = this.handleDocumentMouseMove.bind(this);
    this.handleDocumentMouseUp = this.handleDocumentMouseUp.bind(this);
  }
  getIsDragging() {
    return this.isDragging;
  }
  startResize(event, imgElement, lineInfo, parsedInfo) {
    event.preventDefault();
    event.stopPropagation();
    this.activeImgElement = imgElement;
    this.lineInfoAtDragStart = lineInfo;
    this.draggedImageInfo = {
      path: parsedInfo.path,
      altText: parsedInfo.altText,
      sourceWidth: parsedInfo.specifiedWidth,
      sourceHeight: parsedInfo.specifiedHeight
    };
    if (parsedInfo.specifiedWidth) {
      this.initialImageWidth = parsedInfo.specifiedWidth;
    } else {
      this.initialImageWidth = imgElement.offsetWidth;
    }
    if (!this.initialImageWidth || this.initialImageWidth <= 0)
      this.initialImageWidth = 200;
    const rect = imgElement.getBoundingClientRect();
    this.imageCenterX = rect.left + rect.width / 2;
    this.imageCenterY = rect.top + rect.height / 2;
    const initialDxToCenter = event.clientX - this.imageCenterX;
    const initialDyToCenter = event.clientY - this.imageCenterY;
    this.initialDistanceToCenter = Math.sqrt(
      initialDxToCenter * initialDxToCenter + initialDyToCenter * initialDyToCenter
    );
    if (parsedInfo.isHtml) {
      this.currentZoomPercent = parsedInfo.currentZoomPercent !== void 0 ? parsedInfo.currentZoomPercent : 100;
    } else {
      this.currentZoomPercent = 100;
      let styleString = "";
      if (this.draggedImageInfo.sourceWidth)
        styleString += `width: ${this.draggedImageInfo.sourceWidth}px; `;
      if (this.draggedImageInfo.sourceHeight)
        styleString += `height: ${this.draggedImageInfo.sourceHeight}px; `;
      styleString += `zoom: ${this.currentZoomPercent}%;`;
      const safeAltText = this.draggedImageInfo.altText ? escapeHtml(this.draggedImageInfo.altText) : "";
      const newImgTag = `<img src="${this.draggedImageInfo.path}" alt="${safeAltText}" style="${styleString.trim()}">`;
      const from = lineInfo.lineFrom + parsedInfo.startIndexInLine;
      const to = from + parsedInfo.originalMatch.length;
      const tr = this.view.state.update({
        changes: { from, to, insert: newImgTag },
        selection: {
          anchor: this.view.state.selection.main.head
        },
        userEvent: "image.resize.convert"
      });
      this.view.dispatch(tr);
    }
    this.isDragging = true;
    document.addEventListener("mousemove", this.handleDocumentMouseMove);
    document.addEventListener("mouseup", this.handleDocumentMouseUp);
  }
  handleDocumentMouseMove(event) {
    var _a;
    if (!this.isDragging || !this.activeImgElement || !this.lineInfoAtDragStart || !((_a = this.draggedImageInfo) == null ? void 0 : _a.path)) {
      this.resetState();
      return;
    }
    event.preventDefault();
    event.stopPropagation();
    const currentMouseX = event.clientX;
    const currentMouseY = event.clientY;
    const dxToCenterCurrent = currentMouseX - this.imageCenterX;
    const dyToCenterCurrent = currentMouseY - this.imageCenterY;
    const currentDistanceToCenter = Math.sqrt(
      dxToCenterCurrent * dxToCenterCurrent + dyToCenterCurrent * dyToCenterCurrent
    );
    const distanceChange = currentDistanceToCenter - this.initialDistanceToCenter;
    const zoomSensitivity = 0.2;
    const zoomDelta = distanceChange * zoomSensitivity;
    let newZoom = Math.round(this.currentZoomPercent + zoomDelta);
    newZoom = Math.max(10, Math.min(newZoom, 500));
    this.activeImgElement.style.zoom = `${newZoom}%`;
  }
  handleDocumentMouseUp(event) {
    var _a, _b;
    if (!this.isDragging || !this.activeImgElement || !this.lineInfoAtDragStart || !this.draggedImageInfo) {
      this.resetState();
      return;
    }
    event.preventDefault();
    event.stopPropagation();
    const finalZoomMatch = this.activeImgElement.style.zoom.match(/(\d+)/);
    let finalZoomPercent = this.currentZoomPercent;
    if (finalZoomMatch && finalZoomMatch[1]) {
      finalZoomPercent = parseInt(finalZoomMatch[1], 10);
    }
    finalZoomPercent = Math.max(10, Math.min(finalZoomPercent, 500));
    let finalStyleString = "";
    if (this.draggedImageInfo.sourceWidth) {
      finalStyleString += `width: ${this.draggedImageInfo.sourceWidth}px; `;
    }
    if (this.draggedImageInfo.sourceHeight) {
      finalStyleString += `height: ${this.draggedImageInfo.sourceHeight}px; `;
    }
    finalStyleString += `zoom: ${finalZoomPercent}%;`;
    const safeAltTextFinal = this.draggedImageInfo.altText ? escapeHtml(this.draggedImageInfo.altText) : "";
    const newImgTagFinal = `<img src="${this.draggedImageInfo.path}" alt="${safeAltTextFinal}" style="${finalStyleString.trim()}">`;
    const { lineFrom } = this.lineInfoAtDragStart;
    const currentLineContent = this.view.state.doc.lineAt(lineFrom).text;
    const imgTagToReplaceRegex = new RegExp(
      `<img\\s+src=(?:["']${escapeRegExp(
        (_a = this.draggedImageInfo.path) != null ? _a : ""
      )}["']|${escapeRegExp((_b = this.draggedImageInfo.path) != null ? _b : "")})[^>]*>`,
      "i"
    );
    const matchForUpdate = currentLineContent.match(imgTagToReplaceRegex);
    let fromPos, toPos;
    if (matchForUpdate && matchForUpdate.index !== void 0) {
      fromPos = lineFrom + matchForUpdate.index;
      toPos = fromPos + matchForUpdate[0].length;
    } else {
      const originalSyntaxInfo = parseImageSyntaxFromLine(
        this.lineInfoAtDragStart.lineText
      );
      if (originalSyntaxInfo && originalSyntaxInfo.path === this.draggedImageInfo.path) {
        fromPos = lineFrom + originalSyntaxInfo.startIndexInLine;
        toPos = fromPos + originalSyntaxInfo.originalMatch.length;
      } else {
        this.resetState();
        return;
      }
    }
    if (fromPos !== void 0 && toPos !== void 0) {
      const tr = this.view.state.update({
        changes: { from: fromPos, to: toPos, insert: newImgTagFinal },
        selection: { anchor: this.view.state.selection.main.head },
        userEvent: "image.resize.update"
      });
      this.view.dispatch(tr);
    }
    this.resetState();
  }
  resetState() {
    this.isDragging = false;
    document.removeEventListener("mousemove", this.handleDocumentMouseMove);
    document.removeEventListener("mouseup", this.handleDocumentMouseUp);
    this.lineInfoAtDragStart = null;
    this.draggedImageInfo = null;
    if (this.activeImgElement) {
      this.activeImgElement.style.cursor = "default";
    }
    this.activeImgElement = null;
  }
  update(update, currentHoveredImg) {
    if (this.isDragging && update.docChanged) {
      const imgElement = this.activeImgElement;
      if (imgElement && !document.body.contains(imgElement)) {
        this.resetState();
      } else if (this.lineInfoAtDragStart) {
        try {
          const currentLine = this.view.state.doc.lineAt(
            this.lineInfoAtDragStart.pos
          );
          if (currentLine.text !== this.lineInfoAtDragStart.lineText) {
          }
        } catch (e) {
          this.resetState();
        }
      }
    }
  }
  destroy() {
    document.removeEventListener("mousemove", this.handleDocumentMouseMove);
    document.removeEventListener("mouseup", this.handleDocumentMouseUp);
  }
};

// src/image-hover-view-plugin.ts
var ImageHoverViewPlugin = class {
  constructor(view) {
    this.view = view;
    this.contentDom = view.contentDOM;
    this.resizeController = new ImageResizeController(view);
    this.hoverController = new ImageHoverController(
      view,
      this.contentDom,
      this.resizeController
    );
    this.handleContainerMouseMove = this.hoverController.handleContainerMouseMove.bind(
      this.hoverController
    );
    this.handleContainerMouseLeave = this.hoverController.handleContainerMouseLeave.bind(
      this.hoverController
    );
    this.contentDom.addEventListener(
      "mousemove",
      this.handleContainerMouseMove
    );
    this.contentDom.addEventListener(
      "mouseleave",
      this.handleContainerMouseLeave
    );
  }
  update(update) {
    this.resizeController.update(
      update,
      this.hoverController.getLastHoveredImg()
    );
  }
  destroy() {
    this.contentDom.removeEventListener(
      "mousemove",
      this.handleContainerMouseMove
    );
    this.contentDom.removeEventListener(
      "mouseleave",
      this.handleContainerMouseLeave
    );
    this.hoverController.destroy();
    this.resizeController.destroy();
  }
};

// src/main.ts
var ObsidianImageEnhancePlugin = class extends import_obsidian.Plugin {
  async onload() {
    console.log("Image Enhance Version 1.0.0");
    this.registerEditorExtension(this.createLivePreviewHoverExtension());
  }
  createLivePreviewHoverExtension() {
    return import_view.ViewPlugin.fromClass(ImageHoverViewPlugin);
  }
  onunload() {
    console.log("Unload Image Enhance!");
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic3JjL21haW4udHMiLCAic3JjL3V0aWxzL2ltYWdlLWxpbmstdXRpbHMudHMiLCAic3JjL2ltYWdlLWhvdmVyLWNvbnRyb2xsZXIudHMiLCAic3JjL2ltYWdlLXJlc2l6ZS1jb250cm9sbGVyLnRzIiwgInNyYy9pbWFnZS1ob3Zlci12aWV3LXBsdWdpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgUGx1Z2luIH0gZnJvbSBcIm9ic2lkaWFuXCI7XHJcbmltcG9ydCB7IFZpZXdQbHVnaW4gfSBmcm9tIFwiQGNvZGVtaXJyb3Ivdmlld1wiO1xyXG5pbXBvcnQgeyBJbWFnZUhvdmVyVmlld1BsdWdpbiB9IGZyb20gXCIuL2ltYWdlLWhvdmVyLXZpZXctcGx1Z2luXCI7IC8vIFx1NUJGQ1x1NTE2NVx1NjVCMFx1NzY4NFx1N0M3QlxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT2JzaWRpYW5JbWFnZUVuaGFuY2VQbHVnaW4gZXh0ZW5kcyBQbHVnaW4ge1xyXG5cdGFzeW5jIG9ubG9hZCgpIHtcclxuXHRcdGNvbnNvbGUubG9nKFwiSW1hZ2UgRW5oYW5jZSBWZXJzaW9uIDEuMC4wXCIpO1xyXG5cdFx0dGhpcy5yZWdpc3RlckVkaXRvckV4dGVuc2lvbih0aGlzLmNyZWF0ZUxpdmVQcmV2aWV3SG92ZXJFeHRlbnNpb24oKSk7XHJcblx0fVxyXG5cclxuXHRjcmVhdGVMaXZlUHJldmlld0hvdmVyRXh0ZW5zaW9uKCkge1xyXG5cdFx0Ly8gXHU0RjdGXHU3NTI4XHU0RTAwXHU0RTJBXHU3QzdCXHU2NzY1XHU1MjFCXHU1RUZBIFZpZXdQbHVnaW5cdUZGMENcdThGRDlcdTY4MzdcdTUzRUZcdTRFRTVcdTdCQTFcdTc0MDZcdTcyQjZcdTYwMDFcdTU0OENcdTRFOEJcdTRFRjZcdTc2RDFcdTU0MkNcdTU2NjhcclxuXHRcdHJldHVybiBWaWV3UGx1Z2luLmZyb21DbGFzcyhJbWFnZUhvdmVyVmlld1BsdWdpbik7XHJcblx0fVxyXG5cclxuXHRvbnVubG9hZCgpIHtcclxuXHRcdGNvbnNvbGUubG9nKFwiVW5sb2FkIEltYWdlIEVuaGFuY2UhXCIpO1xyXG5cdH1cclxufVxyXG4iLCAiaW1wb3J0IHsgRWRpdG9yVmlldyB9IGZyb20gXCJAY29kZW1pcnJvci92aWV3XCI7XHJcblxyXG4vKipcclxuICogRXh0cmFjdHMgdGhlIGZpcnN0IHJlY29nbml6YWJsZSBpbWFnZSBwYXRoIGZyb20gYSB0ZXh0IGxpbmUuXHJcbiAqIFByaW9yaXRpemVzIG1hdGNoaW5nIEhUTUwgPGltZz4gdGFncywgdGhlbiBNYXJrZG93biwgYW5kIGZpbmFsbHkgV2lraWxpbmtzLlxyXG4gKiBAcGFyYW0gdGV4dExpbmUgVGhlIHRleHQgbGluZSBjb250YWluaW5nIGltYWdlIHN5bnRheFxyXG4gKiBAcmV0dXJucyBJbWFnZSBwYXRoIHN0cmluZywgb3IgbnVsbCBpZiBub3QgZm91bmRcclxuICogQGRlcHJlY2F0ZWQgVGhpcyBmdW5jdGlvbiBpcyBkZXByZWNhdGVkLCBwbGVhc2UgdXNlIHBhcnNlSW1hZ2VTeW50YXhGcm9tTGluZSBmdW5jdGlvbiBpbnN0ZWFkLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGV4dHJhY3RGaXJzdEltYWdlUGF0aCh0ZXh0TGluZTogc3RyaW5nKTogc3RyaW5nIHwgbnVsbCB7XHJcblx0aWYgKCF0ZXh0TGluZSkge1xyXG5cdFx0cmV0dXJuIG51bGw7XHJcblx0fVxyXG5cclxuXHQvLyAxLiBUcnkgdG8gbWF0Y2ggSFRNTCA8aW1nPiB0YWdzICh3aXRoIG9yIHdpdGhvdXQgc3R5bGUpXHJcblx0Y29uc3QgaHRtbFJlZ2V4ID0gLzxpbWdcXHNbXj5dKnNyYz0oPzpbXCInXShbXlwiJ10rKVtcIiddfChbXj5cXHNdKykpL2k7XHJcblx0bGV0IG1hdGNoID0gdGV4dExpbmUubWF0Y2goaHRtbFJlZ2V4KTtcclxuXHRpZiAobWF0Y2ggJiYgKG1hdGNoWzFdIHx8IG1hdGNoWzJdKSkge1xyXG5cdFx0cmV0dXJuIChtYXRjaFsxXSB8fCBtYXRjaFsyXSkudHJpbSgpO1xyXG5cdH1cclxuXHJcblx0Ly8gMi4gVHJ5IHRvIG1hdGNoIE1hcmtkb3duIHN0eWxlIGxpbmtzIGAhW10ocGF0aClgIG9yIGAhW2FsdF0ocGF0aCBcInRpdGxlXCIpYFxyXG5cdGNvbnN0IG1hcmtkb3duUmVnZXggPSAvIVxcW1teXFxdXSpcXF1cXCgoW14pXFxzXSspKD86XFxzW14pXSopP1xcKS87XHJcblx0bWF0Y2ggPSB0ZXh0TGluZS5tYXRjaChtYXJrZG93blJlZ2V4KTtcclxuXHRpZiAobWF0Y2ggJiYgbWF0Y2hbMV0pIHtcclxuXHRcdHJldHVybiBtYXRjaFsxXS50cmltKCk7XHJcblx0fVxyXG5cclxuXHQvLyAzLiBUcnkgdG8gbWF0Y2ggV2lraWxpbmsgc3R5bGUgbGlua3MgYCFbW3BhdGhdXWAgb3IgYCFbW3BhdGh8YWxpYXNdXWBcclxuXHRjb25zdCB3aWtpbGlua1JlZ2V4ID0gLyFcXFtcXFsoW158XFxdXSspKD86XFx8W15cXF1dKik/XFxdXFxdLztcclxuXHRtYXRjaCA9IHRleHRMaW5lLm1hdGNoKHdpa2lsaW5rUmVnZXgpO1xyXG5cdGlmIChtYXRjaCAmJiBtYXRjaFsxXSkge1xyXG5cdFx0cmV0dXJuIG1hdGNoWzFdLnRyaW0oKTtcclxuXHR9XHJcblxyXG5cdHJldHVybiBudWxsO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgUGFyc2VkSW1hZ2VJbmZvIHtcclxuXHRwYXRoOiBzdHJpbmc7XHJcblx0YWx0VGV4dD86IHN0cmluZztcclxuXHRzcGVjaWZpZWRXaWR0aD86IG51bWJlcjtcclxuXHRzcGVjaWZpZWRIZWlnaHQ/OiBudW1iZXI7XHJcblx0b3JpZ2luYWxNYXRjaDogc3RyaW5nOyAvLyBDb21wbGV0ZSBvcmlnaW5hbCBNYXJrZG93bi9XaWtpbGluayBzdHJpbmcgdGhhdCB3YXMgbWF0Y2hlZFxyXG5cdHN0YXJ0SW5kZXhJbkxpbmU6IG51bWJlcjsgLy8gU3RhcnRpbmcgaW5kZXggb2YgdGhlIG9yaWdpbmFsIG1hdGNoIGluIHRoZSBsaW5lIHRleHRcclxuXHRpc0h0bWw6IGJvb2xlYW47XHJcblx0Y3VycmVudFpvb21QZXJjZW50PzogbnVtYmVyOyAvLyBDdXJyZW50IHpvb20gcGVyY2VudGFnZVxyXG59XHJcblxyXG4vKipcclxuICogUGFyc2VzIGltYWdlIHN5bnRheCBpbiB0ZXh0IGxpbmUsIE1hcmtkb3duIG9ubHlcclxuICogQHBhcmFtIGxpbmVUZXh0IFRoZSB0ZXh0IGxpbmUgY29udGFpbmluZyBpbWFnZSBzeW50YXhcclxuICogQHJldHVybnMgTWF0Y2ggcmVzdWx0IG9iamVjdCBjb250YWluaW5nIGltYWdlIHBhdGgsIGFsdCB0ZXh0LCBzcGVjaWZpZWQgd2lkdGgvaGVpZ2h0LCBldGMuXHJcbiAqL1xyXG5mdW5jdGlvbiBwYXJzZU1hcmtkb3duKGxpbmVUZXh0OiBzdHJpbmcpOiBQYXJzZWRJbWFnZUluZm8gfCBudWxsIHtcclxuXHQvLyBQcmlvcml0eSBtYXRjaGluZyBNYXJrZG93bjogIVthbHR8V3hIXShwYXRoKSBvciAhW2FsdF0ocGF0aCkgb3IgIVt8V3hIXShwYXRoKVxyXG5cdC8vIEdyb3VwIDE6IEFsdCBUZXh0IChjYW4gY29udGFpbiBzcGFjZXMsIGJ1dCBub3QgJ10nKVxyXG5cdC8vIEdyb3VwIDI6IERpbWVuc2lvbnMgV3hIIG9yIFcgKGlmIGdyb3VwIDIgZXhpc3RzKVxyXG5cdC8vIEdyb3VwIDM6IFBhdGhcclxuXHRjb25zdCBtYXJrZG93blJlZ2V4ID0gLyFcXFsoLio/KT8oPzpcXHwoXFxkKyg/OnhcXGQrKT8pKT9cXF1cXCgoW14pXSspXFwpLztcclxuXHRjb25zdCBtYXRjaCA9IGxpbmVUZXh0Lm1hdGNoKG1hcmtkb3duUmVnZXgpO1xyXG5cclxuXHRpZiAobWF0Y2gpIHtcclxuXHRcdGNvbnN0IGFsdFRleHQgPSBtYXRjaFsxXSB8fCB1bmRlZmluZWQ7IC8vIE9ic2lkaWFuJ3MgYWx0IGNhbiBiZSBlbXB0eVxyXG5cdFx0Y29uc3QgZGltZW5zaW9uc1N0cmluZyA9IG1hdGNoWzJdOyAvLyBGb3IgZXhhbXBsZSBcIjEwMHgyMDBcIiBvciBcIjEwMFwiXHJcblx0XHRjb25zdCBwYXRoID0gbWF0Y2hbM10udHJpbSgpO1xyXG5cdFx0bGV0IHNwZWNpZmllZFdpZHRoOiBudW1iZXIgfCB1bmRlZmluZWQ7XHJcblx0XHRsZXQgc3BlY2lmaWVkSGVpZ2h0OiBudW1iZXIgfCB1bmRlZmluZWQ7XHJcblxyXG5cdFx0aWYgKGRpbWVuc2lvbnNTdHJpbmcpIHtcclxuXHRcdFx0Y29uc3QgZGltcyA9IGRpbWVuc2lvbnNTdHJpbmcuc3BsaXQoXCJ4XCIpO1xyXG5cdFx0XHRpZiAoZGltc1swXSkge1xyXG5cdFx0XHRcdHNwZWNpZmllZFdpZHRoID0gcGFyc2VJbnQoZGltc1swXSwgMTApO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmIChkaW1zLmxlbmd0aCA+IDEgJiYgZGltc1sxXSkge1xyXG5cdFx0XHRcdHNwZWNpZmllZEhlaWdodCA9IHBhcnNlSW50KGRpbXNbMV0sIDEwKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0cGF0aCxcclxuXHRcdFx0YWx0VGV4dCxcclxuXHRcdFx0c3BlY2lmaWVkV2lkdGgsXHJcblx0XHRcdHNwZWNpZmllZEhlaWdodCxcclxuXHRcdFx0b3JpZ2luYWxNYXRjaDogbWF0Y2hbMF0sXHJcblx0XHRcdHN0YXJ0SW5kZXhJbkxpbmU6IG1hdGNoLmluZGV4ID8/IDAsXHJcblx0XHRcdGlzSHRtbDogZmFsc2UsXHJcblx0XHR9O1xyXG5cdH1cclxuXHRyZXR1cm4gbnVsbDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFBhcnNlcyBpbWFnZSBzeW50YXggaW4gdGV4dCBsaW5lLCBXaWtpbGluayBvbmx5XHJcbiAqIEBwYXJhbSBsaW5lVGV4dCBUaGUgdGV4dCBsaW5lIGNvbnRhaW5pbmcgaW1hZ2Ugc3ludGF4XHJcbiAqIEByZXR1cm5zIE1hdGNoIHJlc3VsdCBvYmplY3QgY29udGFpbmluZyBpbWFnZSBwYXRoLCBhbHQgdGV4dCwgc3BlY2lmaWVkIHdpZHRoL2hlaWdodCwgZXRjLlxyXG4gKi9cclxuZnVuY3Rpb24gcGFyc2VXaWtpbGluayhsaW5lVGV4dDogc3RyaW5nKTogUGFyc2VkSW1hZ2VJbmZvIHwgbnVsbCB7XHJcblx0Ly8gTWF0Y2ggV2lraWxpbms6ICFbW3BhdGh8V3hIXV0gb3IgIVtbcGF0aHxXXV0gb3IgIVtbcGF0aHxhbHRdXSBvciAhW1twYXRoXV1cclxuXHQvLyBHcm91cCAxOiBQYXRoXHJcblx0Ly8gR3JvdXAgMjogQ29udGVudCBhZnRlciBwaXBlIChhbHQgb3IgV3hIIG9yIFcpIChvcHRpb25hbClcclxuXHRjb25zdCB3aWtpbGlua1JlZ2V4ID0gLyFcXFtcXFsoW158XFxdXSspKD86XFx8KFtefFxcXV0qKSk/XFxdXFxdLztcclxuXHRjb25zdCBtYXRjaCA9IGxpbmVUZXh0Lm1hdGNoKHdpa2lsaW5rUmVnZXgpO1xyXG5cdGlmIChtYXRjaCkge1xyXG5cdFx0Y29uc3QgcGF0aCA9IG1hdGNoWzFdLnRyaW0oKTtcclxuXHRcdGNvbnN0IGFsdE9yRGltZW5zaW9ucyA9IG1hdGNoWzJdOyAvLyBDb3VsZCBiZSB1bmRlZmluZWQsIFwiYWx0IHRleHRcIiwgXCIxMDBcIiwgXCIxMDB4MjAwXCJcclxuXHRcdGxldCBzcGVjaWZpZWRXaWR0aDogbnVtYmVyIHwgdW5kZWZpbmVkO1xyXG5cdFx0bGV0IHNwZWNpZmllZEhlaWdodDogbnVtYmVyIHwgdW5kZWZpbmVkO1xyXG5cdFx0bGV0IGFsdFRleHQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IGFsdE9yRGltZW5zaW9uczsgLy8gRGVmYXVsdCB0byBhbHQgdGV4dFxyXG5cclxuXHRcdGlmIChhbHRPckRpbWVuc2lvbnMpIHtcclxuXHRcdFx0Y29uc3QgZGltTWF0Y2ggPSBhbHRPckRpbWVuc2lvbnMubWF0Y2goL14oXFxkKykoPzp4KFxcZCspKT8kLyk7IC8vIFN0cmljdCBtYXRjaCBmb3IgV3hIIG9yIFdcclxuXHRcdFx0aWYgKGRpbU1hdGNoKSB7XHJcblx0XHRcdFx0Ly8gSXQncyBhIGRpbWVuc2lvbiBzdHJpbmdcclxuXHRcdFx0XHRpZiAoZGltTWF0Y2hbMV0pIHtcclxuXHRcdFx0XHRcdHNwZWNpZmllZFdpZHRoID0gcGFyc2VJbnQoZGltTWF0Y2hbMV0sIDEwKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aWYgKGRpbU1hdGNoWzJdKSB7XHJcblx0XHRcdFx0XHRzcGVjaWZpZWRIZWlnaHQgPSBwYXJzZUludChkaW1NYXRjaFsyXSwgMTApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRhbHRUZXh0ID0gdW5kZWZpbmVkOyAvLyBJZiBpdCdzIGEgZGltZW5zaW9uLCBpdCdzIG5vdCBhbHQgdGV4dFxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRwYXRoLFxyXG5cdFx0XHRhbHRUZXh0LFxyXG5cdFx0XHRzcGVjaWZpZWRXaWR0aCxcclxuXHRcdFx0c3BlY2lmaWVkSGVpZ2h0LFxyXG5cdFx0XHRvcmlnaW5hbE1hdGNoOiBtYXRjaFswXSxcclxuXHRcdFx0c3RhcnRJbmRleEluTGluZTogbWF0Y2guaW5kZXggPz8gMCxcclxuXHRcdFx0aXNIdG1sOiBmYWxzZSxcclxuXHRcdH07XHJcblx0fVxyXG5cdHJldHVybiBudWxsO1xyXG59XHJcblxyXG4vKipcclxuICogUGFyc2VzIEhUTUwgPGltZz4gdGFncyBpbiB0ZXh0IGxpbmVcclxuICogQHBhcmFtIGxpbmVUZXh0IFRoZSB0ZXh0IGxpbmUgY29udGFpbmluZyBpbWFnZSBzeW50YXhcclxuICogQHJldHVybnMgTWF0Y2ggcmVzdWx0IG9iamVjdCBjb250YWluaW5nIGltYWdlIHBhdGgsIGFsdCB0ZXh0LCBzcGVjaWZpZWQgd2lkdGgvaGVpZ2h0LCBldGMuXHJcbiAqL1xyXG5mdW5jdGlvbiBwYXJzZUh0bWwobGluZVRleHQ6IHN0cmluZyk6IFBhcnNlZEltYWdlSW5mbyB8IG51bGwge1xyXG5cdGNvbnN0IGh0bWxJbWdSZWdleCA9XHJcblx0XHQvKDxpbWdcXHMrKD86W14+XSo/XFxzKyk/c3JjPSg/OltcIiddKFteXCInXSspW1wiJ118KFtePlxcc10rKSkoPzpcXHMrW14+XSo/XFxzKmFsdD0oPzpbXCInXShbXlwiJ10qKVtcIiddfChbXj5cXHNdKikpKT8oPzpcXHMrW14+XSo/XFxzKnN0eWxlPSg/OltcIiddKFteXCInXSspW1wiJ118KFtePlxcc10rKSkpP1tePl0qPz4pL2k7XHJcblx0Y29uc3QgaHRtbE1hdGNoID0gbGluZVRleHQubWF0Y2goaHRtbEltZ1JlZ2V4KTtcclxuXHJcblx0aWYgKGh0bWxNYXRjaCkge1xyXG5cdFx0Y29uc3Qgb3JpZ2luYWxIdG1sVGFnID0gaHRtbE1hdGNoWzBdOyAvLyBUaGUgZW50aXJlIG1hdGNoZWQgPGltZz4gdGFnXHJcblx0XHRjb25zdCBwYXRoID0gaHRtbE1hdGNoWzJdIHx8IGh0bWxNYXRjaFszXTsgLy8gc3JjIHZhbHVlXHJcblx0XHRjb25zdCBhbHRUZXh0ID0gaHRtbE1hdGNoWzRdIHx8IGh0bWxNYXRjaFs1XSB8fCB1bmRlZmluZWQ7IC8vIGFsdCB2YWx1ZVxyXG5cdFx0Y29uc3Qgc3R5bGVTdHJpbmcgPSBodG1sTWF0Y2hbNl0gfHwgaHRtbE1hdGNoWzddIHx8IHVuZGVmaW5lZDsgLy8gc3R5bGUgYXR0cmlidXRlIGNvbnRlbnRcclxuXHJcblx0XHRsZXQgc3BlY2lmaWVkV2lkdGg6IG51bWJlciB8IHVuZGVmaW5lZDtcclxuXHRcdGxldCBzcGVjaWZpZWRIZWlnaHQ6IG51bWJlciB8IHVuZGVmaW5lZDtcclxuXHRcdGxldCBjdXJyZW50Wm9vbVA6IG51bWJlciB8IHVuZGVmaW5lZDtcclxuXHJcblx0XHRpZiAoc3R5bGVTdHJpbmcpIHtcclxuXHRcdFx0Y29uc3Qgd2lkdGhNYXRjaCA9IHN0eWxlU3RyaW5nLm1hdGNoKC93aWR0aDpcXHMqKFxcZCspcHgvaSk7XHJcblx0XHRcdGlmICh3aWR0aE1hdGNoICYmIHdpZHRoTWF0Y2hbMV0pIHtcclxuXHRcdFx0XHRzcGVjaWZpZWRXaWR0aCA9IHBhcnNlSW50KHdpZHRoTWF0Y2hbMV0sIDEwKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Y29uc3QgaGVpZ2h0TWF0Y2ggPSBzdHlsZVN0cmluZy5tYXRjaCgvaGVpZ2h0OlxccyooXFxkKylweC9pKTtcclxuXHRcdFx0aWYgKGhlaWdodE1hdGNoICYmIGhlaWdodE1hdGNoWzFdKSB7XHJcblx0XHRcdFx0c3BlY2lmaWVkSGVpZ2h0ID0gcGFyc2VJbnQoaGVpZ2h0TWF0Y2hbMV0sIDEwKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Y29uc3Qgem9vbU1hdGNoID0gc3R5bGVTdHJpbmcubWF0Y2goL3pvb206XFxzKihcXGQrKSU/L2kpOyAvLyBUaGUgJSBhZnRlciB6b29tIHZhbHVlIGlzIG9wdGlvbmFsXHJcblx0XHRcdGlmICh6b29tTWF0Y2ggJiYgem9vbU1hdGNoWzFdKSB7XHJcblx0XHRcdFx0Y3VycmVudFpvb21QID0gcGFyc2VJbnQoem9vbU1hdGNoWzFdLCAxMCk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRpZiAocGF0aCkge1xyXG5cdFx0XHQvLyBNdXN0IGhhdmUgc3JjIGF0dHJpYnV0ZVxyXG5cdFx0XHRyZXR1cm4ge1xyXG5cdFx0XHRcdHBhdGg6IHBhdGgudHJpbSgpLFxyXG5cdFx0XHRcdGFsdFRleHQ6IGFsdFRleHQgPyBhbHRUZXh0LnRyaW0oKSA6IHVuZGVmaW5lZCxcclxuXHRcdFx0XHRzcGVjaWZpZWRXaWR0aCxcclxuXHRcdFx0XHRzcGVjaWZpZWRIZWlnaHQsXHJcblx0XHRcdFx0Y3VycmVudFpvb21QZXJjZW50OiBjdXJyZW50Wm9vbVAsXHJcblx0XHRcdFx0aXNIdG1sOiB0cnVlLFxyXG5cdFx0XHRcdG9yaWdpbmFsTWF0Y2g6IG9yaWdpbmFsSHRtbFRhZyxcclxuXHRcdFx0XHRzdGFydEluZGV4SW5MaW5lOiBodG1sTWF0Y2guaW5kZXggPz8gMCxcclxuXHRcdFx0fTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHJldHVybiBudWxsOyAvLyBObyByZWNvZ25pemFibGUgaW1hZ2Ugc3ludGF4IG1hdGNoZWRcclxufVxyXG5cclxuLyoqXHJcbiAqIFBhcnNlcyBpbWFnZSBzeW50YXggZnJvbSB0ZXh0IGxpbmUsIHN1cHBvcnRpbmcgTWFya2Rvd24sIFdpa2lsaW5rLCBhbmQgSFRNTCA8aW1nPiB0YWdzLlxyXG4gKiBAcGFyYW0gbGluZVRleHQgVGhlIHRleHQgbGluZSBjb250YWluaW5nIGltYWdlIHN5bnRheFxyXG4gKiBAcmV0dXJucyBNYXRjaCByZXN1bHQgb2JqZWN0IGNvbnRhaW5pbmcgaW1hZ2UgcGF0aCwgYWx0IHRleHQsIHNwZWNpZmllZCB3aWR0aC9oZWlnaHQsIGV0Yy5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUltYWdlU3ludGF4RnJvbUxpbmUoXHJcblx0bGluZVRleHQ6IHN0cmluZ1xyXG4pOiBQYXJzZWRJbWFnZUluZm8gfCBudWxsIHtcclxuXHRsZXQgcmVzdWx0ID0gcGFyc2VNYXJrZG93bihsaW5lVGV4dCk7XHJcblx0aWYgKHJlc3VsdCkgcmV0dXJuIHJlc3VsdDtcclxuXHRyZXN1bHQgPSBwYXJzZVdpa2lsaW5rKGxpbmVUZXh0KTtcclxuXHRpZiAocmVzdWx0KSByZXR1cm4gcmVzdWx0O1xyXG5cdHJldHVybiBwYXJzZUh0bWwobGluZVRleHQpOyAvLyBGaW5hbGx5LCB0cnkgSFRNTCA8aW1nPiB0YWdzXHJcbn1cclxuXHJcbi8vIEhlbHBlciBmdW5jdGlvbjogRXNjYXBlIEhUTUwgc3BlY2lhbCBjaGFyYWN0ZXJzIChmb3IgYWx0IGF0dHJpYnV0ZSlcclxuZXhwb3J0IGZ1bmN0aW9uIGVzY2FwZUh0bWwodW5zYWZlOiBzdHJpbmcpOiBzdHJpbmcge1xyXG5cdHJldHVybiB1bnNhZmVcclxuXHRcdC5yZXBsYWNlKC8mL2csIFwiJmFtcDtcIilcclxuXHRcdC5yZXBsYWNlKC88L2csIFwiJmx0O1wiKVxyXG5cdFx0LnJlcGxhY2UoLz4vZywgXCImZ3Q7XCIpXHJcblx0XHQucmVwbGFjZSgvXCIvZywgXCImcXVvdDtcIilcclxuXHRcdC5yZXBsYWNlKC8nL2csIFwiJiMwMzk7XCIpO1xyXG59XHJcblxyXG4vLyBIZWxwZXIgZnVuY3Rpb246IEVzY2FwZSByZWd1bGFyIGV4cHJlc3Npb24gc3BlY2lhbCBjaGFyYWN0ZXJzXHJcbmV4cG9ydCBmdW5jdGlvbiBlc2NhcGVSZWdFeHAoc3RyaW5nOiBzdHJpbmcpOiBzdHJpbmcge1xyXG5cdHJldHVybiBzdHJpbmcucmVwbGFjZSgvWy4qKz9eJHt9KCl8W1xcXVxcXFxdL2csIFwiXFxcXCQmXCIpO1xyXG59XHJcblxyXG4vLyBIZWxwZXIgZnVuY3Rpb246IFRyeSB0byB0cmFjZSB1cHdhcmRzIGZyb20gYSBET00gZWxlbWVudCB0byBmaW5kIGl0cyBwb3NpdGlvbiBpbiB0aGUgQ29kZU1pcnJvciBkb2N1bWVudCBhbmQgdGhlIGNvcnJlc3BvbmRpbmcgbGluZSB0ZXh0XHJcbi8vIFRoaXMgaXMgZXNwZWNpYWxseSBpbXBvcnRhbnQgZm9yIGhhbmRsaW5nIGltYWdlIGVsZW1lbnRzIG5lc3RlZCBpbiBjb21wbGV4IFdpZGdldHNcclxuZXhwb3J0IGZ1bmN0aW9uIGdldExpbmVJbmZvRnJvbUVsZW1lbnQoXHJcblx0dmlldzogRWRpdG9yVmlldyxcclxuXHRlbGVtZW50OiBIVE1MRWxlbWVudFxyXG4pOiB7IHBvczogbnVtYmVyOyBsaW5lVGV4dDogc3RyaW5nOyBsaW5lRnJvbTogbnVtYmVyOyBsaW5lVG86IG51bWJlciB9IHwgbnVsbCB7XHJcblx0bGV0IHBvczogbnVtYmVyIHwgdW5kZWZpbmVkO1xyXG5cclxuXHRpZiAocG9zID09PSB1bmRlZmluZWQpIHtcclxuXHRcdHRyeSB7XHJcblx0XHRcdHBvcyA9IHZpZXcucG9zQXRET00oZWxlbWVudCk7XHJcblx0XHR9IGNhdGNoIChlKSB7XHJcblx0XHRcdC8vIGNvbnNvbGUud2FybihcInBvc0F0RE9NIGZhaWxlZCBmb3IgZWxlbWVudDpcIiwgZWxlbWVudCwgZSk7XHJcblx0XHRcdHJldHVybiBudWxsO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0aWYgKHBvcyA9PT0gbnVsbCB8fCBwb3MgPT09IHVuZGVmaW5lZCkgcmV0dXJuIG51bGw7XHJcblxyXG5cdHRyeSB7XHJcblx0XHRjb25zdCBsaW5lID0gdmlldy5zdGF0ZS5kb2MubGluZUF0KHBvcyk7XHJcblx0XHRjb25zb2xlLmxvZyhcIlN1Y2Nlc3NmdWxseSBnb3QgbGluZSBpbmZvOlwiLCBsaW5lLCBwb3MpO1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0cG9zLFxyXG5cdFx0XHRsaW5lVGV4dDogbGluZS50ZXh0LFxyXG5cdFx0XHRsaW5lRnJvbTogbGluZS5mcm9tLFxyXG5cdFx0XHRsaW5lVG86IGxpbmUudG8sXHJcblx0XHR9O1xyXG5cdH0gY2F0Y2ggKGUpIHtcclxuXHRcdGNvbnNvbGUuZXJyb3IoXCJFcnJvciBnZXR0aW5nIGxpbmUgdGV4dCBmcm9tIGVsZW1lbnQgcG9zaXRpb246XCIsIHBvcywgZSk7XHJcblx0XHRyZXR1cm4gbnVsbDtcclxuXHR9XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgTGluZURldGFpbHMge1xyXG5cdHBvczogbnVtYmVyO1xyXG5cdGxpbmVUZXh0OiBzdHJpbmc7XHJcblx0bGluZUZyb206IG51bWJlcjtcclxuXHRsaW5lVG86IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJbWFnZVN5bnRheEluZm8ge1xyXG5cdHBhdGg6IHN0cmluZyB8IG51bGw7XHJcblx0YWx0VGV4dD86IHN0cmluZztcclxuXHRpc0h0bWw6IGJvb2xlYW47XHJcblx0c3BlY2lmaWVkV2lkdGg/OiBudW1iZXI7XHJcblx0c3BlY2lmaWVkSGVpZ2h0PzogbnVtYmVyO1xyXG5cdGN1cnJlbnRab29tUGVyY2VudD86IG51bWJlcjtcclxuXHRvcmlnaW5hbE1hdGNoOiBzdHJpbmc7XHJcblx0c3RhcnRJbmRleEluTGluZTogbnVtYmVyO1xyXG59XHJcbiIsICJpbXBvcnQgeyBFZGl0b3JWaWV3IH0gZnJvbSBcIkBjb2RlbWlycm9yL3ZpZXdcIjtcclxuaW1wb3J0IHsgSW1hZ2VSZXNpemVDb250cm9sbGVyIH0gZnJvbSBcIi4vaW1hZ2UtcmVzaXplLWNvbnRyb2xsZXJcIjtcclxuaW1wb3J0IHsgcGFyc2VJbWFnZVN5bnRheEZyb21MaW5lLCBnZXRMaW5lSW5mb0Zyb21FbGVtZW50IH0gZnJvbSBcIi4vdXRpbHNcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBJbWFnZUhvdmVyQ29udHJvbGxlciB7XHJcblx0cHJpdmF0ZSBsYXN0SG92ZXJlZEltZzogSFRNTEltYWdlRWxlbWVudCB8IG51bGwgPSBudWxsO1xyXG5cdHByaXZhdGUgYWN0aXZlSW1nTW91c2VNb3ZlVW5saXN0ZW5lcjogKCgpID0+IHZvaWQpIHwgbnVsbCA9IG51bGw7XHJcblx0cHJpdmF0ZSBhY3RpdmVJbWdNb3VzZUxlYXZlVW5saXN0ZW5lcjogKCgpID0+IHZvaWQpIHwgbnVsbCA9IG51bGw7XHJcblx0cHJpdmF0ZSBhY3RpdmVJbWdNb3VzZURvd25Vbmxpc3RlbmVyOiAoKCkgPT4gdm9pZCkgfCBudWxsID0gbnVsbDtcclxuXHJcblx0Y29uc3RydWN0b3IoXHJcblx0XHRwcml2YXRlIHZpZXc6IEVkaXRvclZpZXcsXHJcblx0XHRwcml2YXRlIGNvbnRlbnREb206IEhUTUxFbGVtZW50LFxyXG5cdFx0cHJpdmF0ZSByZXNpemVDb250cm9sbGVyOiBJbWFnZVJlc2l6ZUNvbnRyb2xsZXJcclxuXHQpIHtcclxuXHRcdHRoaXMuaGFuZGxlSW1hZ2VTcGVjaWZpY01vdXNlTW92ZSA9XHJcblx0XHRcdHRoaXMuaGFuZGxlSW1hZ2VTcGVjaWZpY01vdXNlTW92ZS5iaW5kKHRoaXMpO1xyXG5cdFx0dGhpcy5oYW5kbGVJbWFnZVNwZWNpZmljTW91c2VMZWF2ZSA9XHJcblx0XHRcdHRoaXMuaGFuZGxlSW1hZ2VTcGVjaWZpY01vdXNlTGVhdmUuYmluZCh0aGlzKTtcclxuXHRcdHRoaXMuaGFuZGxlSW1hZ2VTcGVjaWZpY01vdXNlRG93biA9XHJcblx0XHRcdHRoaXMuaGFuZGxlSW1hZ2VTcGVjaWZpY01vdXNlRG93bi5iaW5kKHRoaXMpO1xyXG5cdH1cclxuXHJcblx0cHVibGljIGdldExhc3RIb3ZlcmVkSW1nKCk6IEhUTUxJbWFnZUVsZW1lbnQgfCBudWxsIHtcclxuXHRcdHJldHVybiB0aGlzLmxhc3RIb3ZlcmVkSW1nO1xyXG5cdH1cclxuXHJcblx0cHVibGljIGhhbmRsZUNvbnRhaW5lck1vdXNlTW92ZShldmVudDogTW91c2VFdmVudCkge1xyXG5cdFx0aWYgKHRoaXMucmVzaXplQ29udHJvbGxlci5nZXRJc0RyYWdnaW5nKCkpIHJldHVybjtcclxuXHJcblx0XHRjb25zdCB0YXJnZXRFbGVtZW50ID0gZXZlbnQudGFyZ2V0IGFzIEhUTUxFbGVtZW50O1xyXG5cdFx0bGV0IGN1cnJlbnRUYXJnZXRJc091ckltYWdlID0gZmFsc2U7XHJcblx0XHRjb25zdCBpbWdDaGVjayA9IHRhcmdldEVsZW1lbnQuY2xvc2VzdChcclxuXHRcdFx0XCJpbWcsIC5jbS13aWRnZXRJbWFnZSBpbWcsIC5pbWFnZS1lbWJlZCBpbWcsIHNwYW4uY20taW1hZ2UgaW1nLCBmaWd1cmUuaW1hZ2UtY29udGFpbmVyIGltZ1wiXHJcblx0XHQpO1xyXG5cclxuXHRcdGlmIChcclxuXHRcdFx0aW1nQ2hlY2sgJiZcclxuXHRcdFx0aW1nQ2hlY2subm9kZU5hbWUgPT09IFwiSU1HXCIgJiZcclxuXHRcdFx0dGhpcy5jb250ZW50RG9tLmNvbnRhaW5zKGltZ0NoZWNrKVxyXG5cdFx0KSB7XHJcblx0XHRcdGNvbnN0IGltZ1RhcmdldCA9IGltZ0NoZWNrIGFzIEhUTUxJbWFnZUVsZW1lbnQ7XHJcblx0XHRcdGN1cnJlbnRUYXJnZXRJc091ckltYWdlID0gdHJ1ZTtcclxuXHJcblx0XHRcdGlmICh0aGlzLmxhc3RIb3ZlcmVkSW1nICE9PSBpbWdUYXJnZXQpIHtcclxuXHRcdFx0XHR0aGlzLmNsZWFyQWN0aXZlSW1hZ2VTdGF0ZSgpO1xyXG5cdFx0XHRcdHRoaXMubGFzdEhvdmVyZWRJbWcgPSBpbWdUYXJnZXQ7XHJcblx0XHRcdFx0aW1nVGFyZ2V0LmNsYXNzTGlzdC5hZGQoXCJpbWFnZS1ob3Zlci1oaWdobGlnaHRcIik7XHJcblxyXG5cdFx0XHRcdGltZ1RhcmdldC5hZGRFdmVudExpc3RlbmVyKFxyXG5cdFx0XHRcdFx0XCJtb3VzZW1vdmVcIixcclxuXHRcdFx0XHRcdHRoaXMuaGFuZGxlSW1hZ2VTcGVjaWZpY01vdXNlTW92ZVxyXG5cdFx0XHRcdCk7XHJcblx0XHRcdFx0aW1nVGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoXHJcblx0XHRcdFx0XHRcIm1vdXNlbGVhdmVcIixcclxuXHRcdFx0XHRcdHRoaXMuaGFuZGxlSW1hZ2VTcGVjaWZpY01vdXNlTGVhdmVcclxuXHRcdFx0XHQpO1xyXG5cdFx0XHRcdGltZ1RhcmdldC5hZGRFdmVudExpc3RlbmVyKFxyXG5cdFx0XHRcdFx0XCJtb3VzZWRvd25cIixcclxuXHRcdFx0XHRcdHRoaXMuaGFuZGxlSW1hZ2VTcGVjaWZpY01vdXNlRG93blxyXG5cdFx0XHRcdCk7XHJcblxyXG5cdFx0XHRcdHRoaXMuYWN0aXZlSW1nTW91c2VNb3ZlVW5saXN0ZW5lciA9ICgpID0+XHJcblx0XHRcdFx0XHRpbWdUYXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcclxuXHRcdFx0XHRcdFx0XCJtb3VzZW1vdmVcIixcclxuXHRcdFx0XHRcdFx0dGhpcy5oYW5kbGVJbWFnZVNwZWNpZmljTW91c2VNb3ZlXHJcblx0XHRcdFx0XHQpO1xyXG5cdFx0XHRcdHRoaXMuYWN0aXZlSW1nTW91c2VMZWF2ZVVubGlzdGVuZXIgPSAoKSA9PlxyXG5cdFx0XHRcdFx0aW1nVGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoXHJcblx0XHRcdFx0XHRcdFwibW91c2VsZWF2ZVwiLFxyXG5cdFx0XHRcdFx0XHR0aGlzLmhhbmRsZUltYWdlU3BlY2lmaWNNb3VzZUxlYXZlXHJcblx0XHRcdFx0XHQpO1xyXG5cdFx0XHRcdHRoaXMuYWN0aXZlSW1nTW91c2VEb3duVW5saXN0ZW5lciA9ICgpID0+XHJcblx0XHRcdFx0XHRpbWdUYXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcclxuXHRcdFx0XHRcdFx0XCJtb3VzZWRvd25cIixcclxuXHRcdFx0XHRcdFx0dGhpcy5oYW5kbGVJbWFnZVNwZWNpZmljTW91c2VEb3duXHJcblx0XHRcdFx0XHQpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCFjdXJyZW50VGFyZ2V0SXNPdXJJbWFnZSAmJiB0aGlzLmxhc3RIb3ZlcmVkSW1nKSB7XHJcblx0XHRcdGlmICghdGhpcy5sYXN0SG92ZXJlZEltZy5jb250YWlucyh0YXJnZXRFbGVtZW50KSkge1xyXG5cdFx0XHRcdHRoaXMuY2xlYXJBY3RpdmVJbWFnZVN0YXRlKCk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHB1YmxpYyBoYW5kbGVDb250YWluZXJNb3VzZUxlYXZlKGV2ZW50OiBNb3VzZUV2ZW50KSB7XHJcblx0XHRpZiAodGhpcy5yZXNpemVDb250cm9sbGVyLmdldElzRHJhZ2dpbmcoKSkgcmV0dXJuO1xyXG5cclxuXHRcdGNvbnN0IHJlbGF0ZWRUYXJnZXRJc091dHNpZGUgPVxyXG5cdFx0XHQhZXZlbnQucmVsYXRlZFRhcmdldCB8fFxyXG5cdFx0XHQhdGhpcy5jb250ZW50RG9tLmNvbnRhaW5zKGV2ZW50LnJlbGF0ZWRUYXJnZXQgYXMgTm9kZSk7XHJcblx0XHRpZiAocmVsYXRlZFRhcmdldElzT3V0c2lkZSkge1xyXG5cdFx0XHR0aGlzLmNsZWFyQWN0aXZlSW1hZ2VTdGF0ZSgpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cHJpdmF0ZSBoYW5kbGVJbWFnZVNwZWNpZmljTW91c2VNb3ZlKGV2ZW50OiBNb3VzZUV2ZW50KSB7XHJcblx0XHRjb25zdCBpbWdFbGVtZW50ID0gZXZlbnQuY3VycmVudFRhcmdldCBhcyBIVE1MSW1hZ2VFbGVtZW50O1xyXG5cdFx0aWYgKHRoaXMucmVzaXplQ29udHJvbGxlci5nZXRJc0RyYWdnaW5nKCkpIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cdFx0Y29uc3QgcmVjdCA9IGltZ0VsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcblx0XHRjb25zdCBzZW5zaXRpdml0eSA9IDg7XHJcblx0XHRjb25zdCB4ID0gZXZlbnQuY2xpZW50WCAtIHJlY3QubGVmdDtcclxuXHRcdGNvbnN0IHkgPSBldmVudC5jbGllbnRZIC0gcmVjdC50b3A7XHJcblxyXG5cdFx0bGV0IGN1cnNvclN0eWxlID0gXCJncmFiXCI7XHJcblx0XHRjb25zdCBvbkxlZnRFZGdlID0geCA8IHNlbnNpdGl2aXR5O1xyXG5cdFx0Y29uc3Qgb25SaWdodEVkZ2UgPSB4ID4gcmVjdC53aWR0aCAtIHNlbnNpdGl2aXR5O1xyXG5cdFx0Y29uc3Qgb25Ub3BFZGdlID0geSA8IHNlbnNpdGl2aXR5O1xyXG5cdFx0Y29uc3Qgb25Cb3R0b21FZGdlID0geSA+IHJlY3QuaGVpZ2h0IC0gc2Vuc2l0aXZpdHk7XHJcblxyXG5cdFx0aWYgKG9uVG9wRWRnZSAmJiBvbkxlZnRFZGdlKSBjdXJzb3JTdHlsZSA9IFwibndzZS1yZXNpemVcIjtcclxuXHRcdGVsc2UgaWYgKG9uVG9wRWRnZSAmJiBvblJpZ2h0RWRnZSkgY3Vyc29yU3R5bGUgPSBcIm5lc3ctcmVzaXplXCI7XHJcblx0XHRlbHNlIGlmIChvbkJvdHRvbUVkZ2UgJiYgb25MZWZ0RWRnZSkgY3Vyc29yU3R5bGUgPSBcIm5lc3ctcmVzaXplXCI7XHJcblx0XHRlbHNlIGlmIChvbkJvdHRvbUVkZ2UgJiYgb25SaWdodEVkZ2UpIGN1cnNvclN0eWxlID0gXCJud3NlLXJlc2l6ZVwiO1xyXG5cdFx0ZWxzZSBpZiAob25MZWZ0RWRnZSB8fCBvblJpZ2h0RWRnZSkgY3Vyc29yU3R5bGUgPSBcImV3LXJlc2l6ZVwiO1xyXG5cdFx0ZWxzZSBpZiAob25Ub3BFZGdlIHx8IG9uQm90dG9tRWRnZSkgY3Vyc29yU3R5bGUgPSBcIm5zLXJlc2l6ZVwiO1xyXG5cclxuXHRcdGltZ0VsZW1lbnQuc3R5bGUuY3Vyc29yID0gY3Vyc29yU3R5bGU7XHJcblx0fVxyXG5cclxuXHRwcml2YXRlIGhhbmRsZUltYWdlU3BlY2lmaWNNb3VzZUxlYXZlKGV2ZW50OiBNb3VzZUV2ZW50KSB7XHJcblx0XHRjb25zdCBpbWdFbGVtZW50ID0gZXZlbnQuY3VycmVudFRhcmdldCBhcyBIVE1MSW1hZ2VFbGVtZW50O1xyXG5cdFx0aWYgKCF0aGlzLnJlc2l6ZUNvbnRyb2xsZXIuZ2V0SXNEcmFnZ2luZygpKSB7XHJcblx0XHRcdGltZ0VsZW1lbnQuc3R5bGUuY3Vyc29yID0gXCJcIjtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHByaXZhdGUgaGFuZGxlSW1hZ2VTcGVjaWZpY01vdXNlRG93bihldmVudDogTW91c2VFdmVudCkge1xyXG5cdFx0Y29uc3QgaW1nRWxlbWVudCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQgYXMgSFRNTEltYWdlRWxlbWVudDtcclxuXHRcdGNvbnN0IGN1cnNvclN0eWxlID0gaW1nRWxlbWVudC5zdHlsZS5jdXJzb3I7XHJcblxyXG5cdFx0aWYgKGN1cnNvclN0eWxlICYmIGN1cnNvclN0eWxlLmluY2x1ZGVzKFwiLXJlc2l6ZVwiKSkge1xyXG5cdFx0XHRjb25zdCBsaW5lSW5mbyA9IGdldExpbmVJbmZvRnJvbUVsZW1lbnQodGhpcy52aWV3LCBpbWdFbGVtZW50KTtcclxuXHRcdFx0aWYgKCFsaW5lSW5mbykge1xyXG5cdFx0XHRcdC8vIGNvbnNvbGUud2FybihcIk1vdXNlZG93bjogXHU2NUUwXHU2Q0Q1XHU4M0I3XHU1M0Q2XHU1NkZFXHU3MjQ3XHU2MjQwXHU1NzI4XHU4ODRDXHU3Njg0XHU0RkUxXHU2MDZGXHUzMDAyXCIpO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Y29uc3QgcGFyc2VkSW5mbyA9IHBhcnNlSW1hZ2VTeW50YXhGcm9tTGluZShsaW5lSW5mby5saW5lVGV4dCk7XHJcblx0XHRcdGlmICghcGFyc2VkSW5mbykge1xyXG5cdFx0XHRcdC8vIGNvbnNvbGUud2FybihcclxuXHRcdFx0XHQvLyBcdFwiTW91c2Vkb3duOiBcdTY1RTBcdTZDRDVcdTg5RTNcdTY3OTBcdTg4NENcdTRFMkRcdTc2ODRcdTRFRkJcdTRGNTVcdTU2RkVcdTcyNDdcdThCRURcdTZDRDU6XCIsXHJcblx0XHRcdFx0Ly8gXHRsaW5lSW5mby5saW5lVGV4dFxyXG5cdFx0XHRcdC8vICk7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblx0XHRcdHRoaXMucmVzaXplQ29udHJvbGxlci5zdGFydFJlc2l6ZShcclxuXHRcdFx0XHRldmVudCxcclxuXHRcdFx0XHRpbWdFbGVtZW50LFxyXG5cdFx0XHRcdGxpbmVJbmZvLFxyXG5cdFx0XHRcdHBhcnNlZEluZm9cclxuXHRcdFx0KTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHB1YmxpYyBjbGVhckFjdGl2ZUltYWdlU3RhdGUoKSB7XHJcblx0XHRpZiAodGhpcy5sYXN0SG92ZXJlZEltZykge1xyXG5cdFx0XHR0aGlzLmxhc3RIb3ZlcmVkSW1nLmNsYXNzTGlzdC5yZW1vdmUoXCJpbWFnZS1ob3Zlci1oaWdobGlnaHRcIik7XHJcblx0XHRcdHRoaXMubGFzdEhvdmVyZWRJbWcuc3R5bGUuY3Vyc29yID0gXCJcIjtcclxuXHJcblx0XHRcdGlmICh0aGlzLmFjdGl2ZUltZ01vdXNlTW92ZVVubGlzdGVuZXIpXHJcblx0XHRcdFx0dGhpcy5hY3RpdmVJbWdNb3VzZU1vdmVVbmxpc3RlbmVyKCk7XHJcblx0XHRcdGlmICh0aGlzLmFjdGl2ZUltZ01vdXNlTGVhdmVVbmxpc3RlbmVyKVxyXG5cdFx0XHRcdHRoaXMuYWN0aXZlSW1nTW91c2VMZWF2ZVVubGlzdGVuZXIoKTtcclxuXHRcdFx0aWYgKHRoaXMuYWN0aXZlSW1nTW91c2VEb3duVW5saXN0ZW5lcilcclxuXHRcdFx0XHR0aGlzLmFjdGl2ZUltZ01vdXNlRG93blVubGlzdGVuZXIoKTtcclxuXHJcblx0XHRcdHRoaXMuYWN0aXZlSW1nTW91c2VNb3ZlVW5saXN0ZW5lciA9IG51bGw7XHJcblx0XHRcdHRoaXMuYWN0aXZlSW1nTW91c2VMZWF2ZVVubGlzdGVuZXIgPSBudWxsO1xyXG5cdFx0XHR0aGlzLmFjdGl2ZUltZ01vdXNlRG93blVubGlzdGVuZXIgPSBudWxsO1xyXG5cdFx0XHR0aGlzLmxhc3RIb3ZlcmVkSW1nID0gbnVsbDtcclxuXHRcdH1cclxuXHRcdGlmICh0aGlzLnJlc2l6ZUNvbnRyb2xsZXIuZ2V0SXNEcmFnZ2luZygpKSB7XHJcblx0XHRcdHRoaXMucmVzaXplQ29udHJvbGxlci5yZXNldFN0YXRlKCk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgZGVzdHJveSgpIHtcclxuXHRcdHRoaXMuY2xlYXJBY3RpdmVJbWFnZVN0YXRlKCk7XHJcblx0fVxyXG59XHJcbiIsICJpbXBvcnQgeyBFZGl0b3JWaWV3LCBWaWV3VXBkYXRlIH0gZnJvbSBcIkBjb2RlbWlycm9yL3ZpZXdcIjtcclxuaW1wb3J0IHtcclxuXHRwYXJzZUltYWdlU3ludGF4RnJvbUxpbmUsXHJcblx0ZXNjYXBlSHRtbCxcclxuXHRlc2NhcGVSZWdFeHAsXHJcblx0TGluZURldGFpbHMsXHJcblx0SW1hZ2VTeW50YXhJbmZvLFxyXG59IGZyb20gXCIuL3V0aWxzXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgSW1hZ2VSZXNpemVDb250cm9sbGVyIHtcclxuXHRwcml2YXRlIGlzRHJhZ2dpbmcgPSBmYWxzZTtcclxuXHRwcml2YXRlIGluaXRpYWxJbWFnZVdpZHRoID0gMDtcclxuXHRwcml2YXRlIGluaXRpYWxJbWFnZUhlaWdodCA9IDA7XHJcblx0cHJpdmF0ZSBjdXJyZW50Wm9vbVBlcmNlbnQgPSAxMDA7XHJcblx0cHJpdmF0ZSBsaW5lSW5mb0F0RHJhZ1N0YXJ0OiBMaW5lRGV0YWlscyB8IG51bGwgPSBudWxsO1xyXG5cdHByaXZhdGUgZHJhZ2dlZEltYWdlSW5mbzoge1xyXG5cdFx0cGF0aDogc3RyaW5nIHwgbnVsbDtcclxuXHRcdGFsdFRleHQ/OiBzdHJpbmc7XHJcblx0XHRzb3VyY2VXaWR0aD86IG51bWJlcjtcclxuXHRcdHNvdXJjZUhlaWdodD86IG51bWJlcjtcclxuXHR9IHwgbnVsbCA9IG51bGw7XHJcblx0cHJpdmF0ZSBpbWFnZUNlbnRlclggPSAwO1xyXG5cdHByaXZhdGUgaW1hZ2VDZW50ZXJZID0gMDtcclxuXHRwcml2YXRlIGluaXRpYWxEaXN0YW5jZVRvQ2VudGVyID0gMDtcclxuXHJcblx0cHJpdmF0ZSBhY3RpdmVJbWdFbGVtZW50OiBIVE1MSW1hZ2VFbGVtZW50IHwgbnVsbCA9IG51bGw7IC8vIFx1NUY1M1x1NTI0RFx1NkI2M1x1NTcyOFx1NjRDRFx1NEY1Q1x1NzY4NFx1NTZGRVx1NzI0N1x1NTE0M1x1N0QyMFxyXG5cclxuXHRjb25zdHJ1Y3Rvcihwcml2YXRlIHZpZXc6IEVkaXRvclZpZXcpIHtcclxuXHRcdHRoaXMuaGFuZGxlRG9jdW1lbnRNb3VzZU1vdmUgPSB0aGlzLmhhbmRsZURvY3VtZW50TW91c2VNb3ZlLmJpbmQodGhpcyk7XHJcblx0XHR0aGlzLmhhbmRsZURvY3VtZW50TW91c2VVcCA9IHRoaXMuaGFuZGxlRG9jdW1lbnRNb3VzZVVwLmJpbmQodGhpcyk7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgZ2V0SXNEcmFnZ2luZygpOiBib29sZWFuIHtcclxuXHRcdHJldHVybiB0aGlzLmlzRHJhZ2dpbmc7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgc3RhcnRSZXNpemUoXHJcblx0XHRldmVudDogTW91c2VFdmVudCxcclxuXHRcdGltZ0VsZW1lbnQ6IEhUTUxJbWFnZUVsZW1lbnQsXHJcblx0XHRsaW5lSW5mbzogTGluZURldGFpbHMsXHJcblx0XHRwYXJzZWRJbmZvOiBJbWFnZVN5bnRheEluZm9cclxuXHQpIHtcclxuXHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcblx0XHR0aGlzLmFjdGl2ZUltZ0VsZW1lbnQgPSBpbWdFbGVtZW50O1xyXG5cdFx0dGhpcy5saW5lSW5mb0F0RHJhZ1N0YXJ0ID0gbGluZUluZm87XHJcblxyXG5cdFx0dGhpcy5kcmFnZ2VkSW1hZ2VJbmZvID0ge1xyXG5cdFx0XHRwYXRoOiBwYXJzZWRJbmZvLnBhdGgsXHJcblx0XHRcdGFsdFRleHQ6IHBhcnNlZEluZm8uYWx0VGV4dCxcclxuXHRcdFx0c291cmNlV2lkdGg6IHBhcnNlZEluZm8uc3BlY2lmaWVkV2lkdGgsXHJcblx0XHRcdHNvdXJjZUhlaWdodDogcGFyc2VkSW5mby5zcGVjaWZpZWRIZWlnaHQsXHJcblx0XHR9O1xyXG5cclxuXHRcdGlmIChwYXJzZWRJbmZvLnNwZWNpZmllZFdpZHRoKSB7XHJcblx0XHRcdHRoaXMuaW5pdGlhbEltYWdlV2lkdGggPSBwYXJzZWRJbmZvLnNwZWNpZmllZFdpZHRoO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0dGhpcy5pbml0aWFsSW1hZ2VXaWR0aCA9IGltZ0VsZW1lbnQub2Zmc2V0V2lkdGg7XHJcblx0XHR9XHJcblx0XHRpZiAoIXRoaXMuaW5pdGlhbEltYWdlV2lkdGggfHwgdGhpcy5pbml0aWFsSW1hZ2VXaWR0aCA8PSAwKVxyXG5cdFx0XHR0aGlzLmluaXRpYWxJbWFnZVdpZHRoID0gMjAwO1xyXG5cclxuXHRcdGNvbnN0IHJlY3QgPSBpbWdFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG5cdFx0dGhpcy5pbWFnZUNlbnRlclggPSByZWN0LmxlZnQgKyByZWN0LndpZHRoIC8gMjtcclxuXHRcdHRoaXMuaW1hZ2VDZW50ZXJZID0gcmVjdC50b3AgKyByZWN0LmhlaWdodCAvIDI7XHJcblx0XHRjb25zdCBpbml0aWFsRHhUb0NlbnRlciA9IGV2ZW50LmNsaWVudFggLSB0aGlzLmltYWdlQ2VudGVyWDtcclxuXHRcdGNvbnN0IGluaXRpYWxEeVRvQ2VudGVyID0gZXZlbnQuY2xpZW50WSAtIHRoaXMuaW1hZ2VDZW50ZXJZO1xyXG5cdFx0dGhpcy5pbml0aWFsRGlzdGFuY2VUb0NlbnRlciA9IE1hdGguc3FydChcclxuXHRcdFx0aW5pdGlhbER4VG9DZW50ZXIgKiBpbml0aWFsRHhUb0NlbnRlciArXHJcblx0XHRcdFx0aW5pdGlhbER5VG9DZW50ZXIgKiBpbml0aWFsRHlUb0NlbnRlclxyXG5cdFx0KTtcclxuXHJcblx0XHRpZiAocGFyc2VkSW5mby5pc0h0bWwpIHtcclxuXHRcdFx0dGhpcy5jdXJyZW50Wm9vbVBlcmNlbnQgPVxyXG5cdFx0XHRcdHBhcnNlZEluZm8uY3VycmVudFpvb21QZXJjZW50ICE9PSB1bmRlZmluZWRcclxuXHRcdFx0XHRcdD8gcGFyc2VkSW5mby5jdXJyZW50Wm9vbVBlcmNlbnRcclxuXHRcdFx0XHRcdDogMTAwO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0dGhpcy5jdXJyZW50Wm9vbVBlcmNlbnQgPSAxMDA7XHJcblx0XHRcdGxldCBzdHlsZVN0cmluZyA9IFwiXCI7XHJcblx0XHRcdGlmICh0aGlzLmRyYWdnZWRJbWFnZUluZm8uc291cmNlV2lkdGgpXHJcblx0XHRcdFx0c3R5bGVTdHJpbmcgKz0gYHdpZHRoOiAke3RoaXMuZHJhZ2dlZEltYWdlSW5mby5zb3VyY2VXaWR0aH1weDsgYDtcclxuXHRcdFx0aWYgKHRoaXMuZHJhZ2dlZEltYWdlSW5mby5zb3VyY2VIZWlnaHQpXHJcblx0XHRcdFx0c3R5bGVTdHJpbmcgKz0gYGhlaWdodDogJHt0aGlzLmRyYWdnZWRJbWFnZUluZm8uc291cmNlSGVpZ2h0fXB4OyBgO1xyXG5cdFx0XHRzdHlsZVN0cmluZyArPSBgem9vbTogJHt0aGlzLmN1cnJlbnRab29tUGVyY2VudH0lO2A7XHJcblxyXG5cdFx0XHRjb25zdCBzYWZlQWx0VGV4dCA9IHRoaXMuZHJhZ2dlZEltYWdlSW5mby5hbHRUZXh0XHJcblx0XHRcdFx0PyBlc2NhcGVIdG1sKHRoaXMuZHJhZ2dlZEltYWdlSW5mby5hbHRUZXh0KVxyXG5cdFx0XHRcdDogXCJcIjtcclxuXHRcdFx0Y29uc3QgbmV3SW1nVGFnID0gYDxpbWcgc3JjPVwiJHtcclxuXHRcdFx0XHR0aGlzLmRyYWdnZWRJbWFnZUluZm8ucGF0aFxyXG5cdFx0XHR9XCIgYWx0PVwiJHtzYWZlQWx0VGV4dH1cIiBzdHlsZT1cIiR7c3R5bGVTdHJpbmcudHJpbSgpfVwiPmA7XHJcblxyXG5cdFx0XHRjb25zdCBmcm9tID0gbGluZUluZm8ubGluZUZyb20gKyBwYXJzZWRJbmZvLnN0YXJ0SW5kZXhJbkxpbmU7XHJcblx0XHRcdGNvbnN0IHRvID0gZnJvbSArIHBhcnNlZEluZm8ub3JpZ2luYWxNYXRjaC5sZW5ndGg7XHJcblxyXG5cdFx0XHRjb25zdCB0ciA9IHRoaXMudmlldy5zdGF0ZS51cGRhdGUoe1xyXG5cdFx0XHRcdGNoYW5nZXM6IHsgZnJvbSwgdG8sIGluc2VydDogbmV3SW1nVGFnIH0sXHJcblx0XHRcdFx0c2VsZWN0aW9uOiB7XHJcblx0XHRcdFx0XHRhbmNob3I6IHRoaXMudmlldy5zdGF0ZS5zZWxlY3Rpb24ubWFpbi5oZWFkLFxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0dXNlckV2ZW50OiBcImltYWdlLnJlc2l6ZS5jb252ZXJ0XCIsXHJcblx0XHRcdH0pO1xyXG5cdFx0XHR0aGlzLnZpZXcuZGlzcGF0Y2godHIpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuaXNEcmFnZ2luZyA9IHRydWU7XHJcblx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIHRoaXMuaGFuZGxlRG9jdW1lbnRNb3VzZU1vdmUpO1xyXG5cdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgdGhpcy5oYW5kbGVEb2N1bWVudE1vdXNlVXApO1xyXG5cdH1cclxuXHJcblx0cHJpdmF0ZSBoYW5kbGVEb2N1bWVudE1vdXNlTW92ZShldmVudDogTW91c2VFdmVudCkge1xyXG5cdFx0aWYgKFxyXG5cdFx0XHQhdGhpcy5pc0RyYWdnaW5nIHx8XHJcblx0XHRcdCF0aGlzLmFjdGl2ZUltZ0VsZW1lbnQgfHxcclxuXHRcdFx0IXRoaXMubGluZUluZm9BdERyYWdTdGFydCB8fFxyXG5cdFx0XHQhdGhpcy5kcmFnZ2VkSW1hZ2VJbmZvPy5wYXRoXHJcblx0XHQpIHtcclxuXHRcdFx0dGhpcy5yZXNldFN0YXRlKCk7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcblx0XHRjb25zdCBjdXJyZW50TW91c2VYID0gZXZlbnQuY2xpZW50WDtcclxuXHRcdGNvbnN0IGN1cnJlbnRNb3VzZVkgPSBldmVudC5jbGllbnRZO1xyXG5cdFx0Y29uc3QgZHhUb0NlbnRlckN1cnJlbnQgPSBjdXJyZW50TW91c2VYIC0gdGhpcy5pbWFnZUNlbnRlclg7XHJcblx0XHRjb25zdCBkeVRvQ2VudGVyQ3VycmVudCA9IGN1cnJlbnRNb3VzZVkgLSB0aGlzLmltYWdlQ2VudGVyWTtcclxuXHRcdGNvbnN0IGN1cnJlbnREaXN0YW5jZVRvQ2VudGVyID0gTWF0aC5zcXJ0KFxyXG5cdFx0XHRkeFRvQ2VudGVyQ3VycmVudCAqIGR4VG9DZW50ZXJDdXJyZW50ICtcclxuXHRcdFx0XHRkeVRvQ2VudGVyQ3VycmVudCAqIGR5VG9DZW50ZXJDdXJyZW50XHJcblx0XHQpO1xyXG5cdFx0Y29uc3QgZGlzdGFuY2VDaGFuZ2UgPVxyXG5cdFx0XHRjdXJyZW50RGlzdGFuY2VUb0NlbnRlciAtIHRoaXMuaW5pdGlhbERpc3RhbmNlVG9DZW50ZXI7XHJcblx0XHRjb25zdCB6b29tU2Vuc2l0aXZpdHkgPSAwLjI7XHJcblx0XHRjb25zdCB6b29tRGVsdGEgPSBkaXN0YW5jZUNoYW5nZSAqIHpvb21TZW5zaXRpdml0eTtcclxuXHRcdGxldCBuZXdab29tID0gTWF0aC5yb3VuZCh0aGlzLmN1cnJlbnRab29tUGVyY2VudCArIHpvb21EZWx0YSk7XHJcblx0XHRuZXdab29tID0gTWF0aC5tYXgoMTAsIE1hdGgubWluKG5ld1pvb20sIDUwMCkpO1xyXG5cclxuXHRcdHRoaXMuYWN0aXZlSW1nRWxlbWVudC5zdHlsZS56b29tID0gYCR7bmV3Wm9vbX0lYDtcclxuXHR9XHJcblxyXG5cdHByaXZhdGUgaGFuZGxlRG9jdW1lbnRNb3VzZVVwKGV2ZW50OiBNb3VzZUV2ZW50KSB7XHJcblx0XHRpZiAoXHJcblx0XHRcdCF0aGlzLmlzRHJhZ2dpbmcgfHxcclxuXHRcdFx0IXRoaXMuYWN0aXZlSW1nRWxlbWVudCB8fFxyXG5cdFx0XHQhdGhpcy5saW5lSW5mb0F0RHJhZ1N0YXJ0IHx8XHJcblx0XHRcdCF0aGlzLmRyYWdnZWRJbWFnZUluZm9cclxuXHRcdCkge1xyXG5cdFx0XHR0aGlzLnJlc2V0U3RhdGUoKTtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuXHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuXHRcdGNvbnN0IGZpbmFsWm9vbU1hdGNoID0gdGhpcy5hY3RpdmVJbWdFbGVtZW50LnN0eWxlLnpvb20ubWF0Y2goLyhcXGQrKS8pO1xyXG5cdFx0bGV0IGZpbmFsWm9vbVBlcmNlbnQgPSB0aGlzLmN1cnJlbnRab29tUGVyY2VudDtcclxuXHRcdGlmIChmaW5hbFpvb21NYXRjaCAmJiBmaW5hbFpvb21NYXRjaFsxXSkge1xyXG5cdFx0XHRmaW5hbFpvb21QZXJjZW50ID0gcGFyc2VJbnQoZmluYWxab29tTWF0Y2hbMV0sIDEwKTtcclxuXHRcdH1cclxuXHRcdGZpbmFsWm9vbVBlcmNlbnQgPSBNYXRoLm1heCgxMCwgTWF0aC5taW4oZmluYWxab29tUGVyY2VudCwgNTAwKSk7XHJcblx0XHQvLyBjb25zb2xlLmxvZyhgXHU2MkQ2XHU2MkZEXHU3RUQzXHU2NzVGXHVGRjBDXHU2NzAwXHU3RUM4XHU3RjI5XHU2NTNFOiAke2ZpbmFsWm9vbVBlcmNlbnR9JWApO1xyXG5cclxuXHRcdGxldCBmaW5hbFN0eWxlU3RyaW5nID0gXCJcIjtcclxuXHRcdGlmICh0aGlzLmRyYWdnZWRJbWFnZUluZm8uc291cmNlV2lkdGgpIHtcclxuXHRcdFx0ZmluYWxTdHlsZVN0cmluZyArPSBgd2lkdGg6ICR7dGhpcy5kcmFnZ2VkSW1hZ2VJbmZvLnNvdXJjZVdpZHRofXB4OyBgO1xyXG5cdFx0fVxyXG5cdFx0aWYgKHRoaXMuZHJhZ2dlZEltYWdlSW5mby5zb3VyY2VIZWlnaHQpIHtcclxuXHRcdFx0ZmluYWxTdHlsZVN0cmluZyArPSBgaGVpZ2h0OiAke3RoaXMuZHJhZ2dlZEltYWdlSW5mby5zb3VyY2VIZWlnaHR9cHg7IGA7XHJcblx0XHR9XHJcblx0XHRmaW5hbFN0eWxlU3RyaW5nICs9IGB6b29tOiAke2ZpbmFsWm9vbVBlcmNlbnR9JTtgO1xyXG5cclxuXHRcdGNvbnN0IHNhZmVBbHRUZXh0RmluYWwgPSB0aGlzLmRyYWdnZWRJbWFnZUluZm8uYWx0VGV4dFxyXG5cdFx0XHQ/IGVzY2FwZUh0bWwodGhpcy5kcmFnZ2VkSW1hZ2VJbmZvLmFsdFRleHQpXHJcblx0XHRcdDogXCJcIjtcclxuXHRcdGNvbnN0IG5ld0ltZ1RhZ0ZpbmFsID0gYDxpbWcgc3JjPVwiJHtcclxuXHRcdFx0dGhpcy5kcmFnZ2VkSW1hZ2VJbmZvLnBhdGhcclxuXHRcdH1cIiBhbHQ9XCIke3NhZmVBbHRUZXh0RmluYWx9XCIgc3R5bGU9XCIke2ZpbmFsU3R5bGVTdHJpbmcudHJpbSgpfVwiPmA7XHJcblxyXG5cdFx0Y29uc3QgeyBsaW5lRnJvbSB9ID0gdGhpcy5saW5lSW5mb0F0RHJhZ1N0YXJ0O1xyXG5cdFx0Y29uc3QgY3VycmVudExpbmVDb250ZW50ID0gdGhpcy52aWV3LnN0YXRlLmRvYy5saW5lQXQobGluZUZyb20pLnRleHQ7XHJcblx0XHRjb25zdCBpbWdUYWdUb1JlcGxhY2VSZWdleCA9IG5ldyBSZWdFeHAoXHJcblx0XHRcdGA8aW1nXFxcXHMrc3JjPSg/OltcIiddJHtlc2NhcGVSZWdFeHAoXHJcblx0XHRcdFx0dGhpcy5kcmFnZ2VkSW1hZ2VJbmZvLnBhdGggPz8gXCJcIlxyXG5cdFx0XHQpfVtcIiddfCR7ZXNjYXBlUmVnRXhwKHRoaXMuZHJhZ2dlZEltYWdlSW5mby5wYXRoID8/IFwiXCIpfSlgICtcclxuXHRcdFx0XHRgW14+XSo+YCxcclxuXHRcdFx0XCJpXCJcclxuXHRcdCk7XHJcblxyXG5cdFx0Y29uc3QgbWF0Y2hGb3JVcGRhdGUgPSBjdXJyZW50TGluZUNvbnRlbnQubWF0Y2goaW1nVGFnVG9SZXBsYWNlUmVnZXgpO1xyXG5cdFx0bGV0IGZyb21Qb3M6IG51bWJlciB8IHVuZGVmaW5lZCwgdG9Qb3M6IG51bWJlciB8IHVuZGVmaW5lZDtcclxuXHJcblx0XHRpZiAobWF0Y2hGb3JVcGRhdGUgJiYgbWF0Y2hGb3JVcGRhdGUuaW5kZXggIT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRmcm9tUG9zID0gbGluZUZyb20gKyBtYXRjaEZvclVwZGF0ZS5pbmRleDtcclxuXHRcdFx0dG9Qb3MgPSBmcm9tUG9zICsgbWF0Y2hGb3JVcGRhdGVbMF0ubGVuZ3RoO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Y29uc3Qgb3JpZ2luYWxTeW50YXhJbmZvID0gcGFyc2VJbWFnZVN5bnRheEZyb21MaW5lKFxyXG5cdFx0XHRcdHRoaXMubGluZUluZm9BdERyYWdTdGFydC5saW5lVGV4dFxyXG5cdFx0XHQpO1xyXG5cdFx0XHRpZiAoXHJcblx0XHRcdFx0b3JpZ2luYWxTeW50YXhJbmZvICYmXHJcblx0XHRcdFx0b3JpZ2luYWxTeW50YXhJbmZvLnBhdGggPT09IHRoaXMuZHJhZ2dlZEltYWdlSW5mby5wYXRoXHJcblx0XHRcdCkge1xyXG5cdFx0XHRcdC8vIGNvbnNvbGUubG9nKFwiTW91c2VVcDogXHU1QzFEXHU4QkQ1XHU0RjdGXHU3NTI4XHU1MzlGXHU1OUNCTWFya2Rvd24vV2lraWxpbmtcdTRGNERcdTdGNkVcdThGREJcdTg4NENcdTY2RkZcdTYzNjJcdTMwMDJcIik7XHJcblx0XHRcdFx0ZnJvbVBvcyA9IGxpbmVGcm9tICsgb3JpZ2luYWxTeW50YXhJbmZvLnN0YXJ0SW5kZXhJbkxpbmU7XHJcblx0XHRcdFx0dG9Qb3MgPSBmcm9tUG9zICsgb3JpZ2luYWxTeW50YXhJbmZvLm9yaWdpbmFsTWF0Y2gubGVuZ3RoO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdC8vIGNvbnNvbGUud2FybihcclxuXHRcdFx0XHQvLyBcdGBNb3VzZVVwOiBcdTY1RTBcdTZDRDVcdTU3MjhcdTg4NENcdTRFMkRcdTYyN0VcdTUyMzBcdTg5ODFcdTY2RjRcdTY1QjBcdTc2ODQgPGltZyAvPiBcdTY4MDdcdTdCN0VcdTMwMDJcdTg4NENcdTUxODVcdTVCQjk6IFwiJHtjdXJyZW50TGluZUNvbnRlbnR9XCIsIFx1NjcxRlx1NjcxQlx1OERFRlx1NUY4NDogJHt0aGlzLmRyYWdnZWRJbWFnZUluZm8ucGF0aH1gXHJcblx0XHRcdFx0Ly8gKTtcclxuXHRcdFx0XHR0aGlzLnJlc2V0U3RhdGUoKTtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoZnJvbVBvcyAhPT0gdW5kZWZpbmVkICYmIHRvUG9zICE9PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0Y29uc3QgdHIgPSB0aGlzLnZpZXcuc3RhdGUudXBkYXRlKHtcclxuXHRcdFx0XHRjaGFuZ2VzOiB7IGZyb206IGZyb21Qb3MsIHRvOiB0b1BvcywgaW5zZXJ0OiBuZXdJbWdUYWdGaW5hbCB9LFxyXG5cdFx0XHRcdHNlbGVjdGlvbjogeyBhbmNob3I6IHRoaXMudmlldy5zdGF0ZS5zZWxlY3Rpb24ubWFpbi5oZWFkIH0sXHJcblx0XHRcdFx0dXNlckV2ZW50OiBcImltYWdlLnJlc2l6ZS51cGRhdGVcIixcclxuXHRcdFx0fSk7XHJcblx0XHRcdHRoaXMudmlldy5kaXNwYXRjaCh0cik7XHJcblx0XHR9XHJcblx0XHR0aGlzLnJlc2V0U3RhdGUoKTtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyByZXNldFN0YXRlKCkge1xyXG5cdFx0dGhpcy5pc0RyYWdnaW5nID0gZmFsc2U7XHJcblx0XHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIHRoaXMuaGFuZGxlRG9jdW1lbnRNb3VzZU1vdmUpO1xyXG5cdFx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgdGhpcy5oYW5kbGVEb2N1bWVudE1vdXNlVXApO1xyXG5cdFx0dGhpcy5saW5lSW5mb0F0RHJhZ1N0YXJ0ID0gbnVsbDtcclxuXHRcdHRoaXMuZHJhZ2dlZEltYWdlSW5mbyA9IG51bGw7XHJcblx0XHRpZiAodGhpcy5hY3RpdmVJbWdFbGVtZW50KSB7XHJcblx0XHRcdHRoaXMuYWN0aXZlSW1nRWxlbWVudC5zdHlsZS5jdXJzb3IgPSBcImRlZmF1bHRcIjtcclxuXHRcdH1cclxuXHRcdHRoaXMuYWN0aXZlSW1nRWxlbWVudCA9IG51bGw7XHJcblx0XHQvLyBjb25zb2xlLmxvZyhcIlx1NjJENlx1NjJGRFx1NzJCNlx1NjAwMVx1NURGMlx1OTFDRFx1N0Y2RVx1MzAwMlwiKTtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyB1cGRhdGUoXHJcblx0XHR1cGRhdGU6IFZpZXdVcGRhdGUsXHJcblx0XHRjdXJyZW50SG92ZXJlZEltZzogSFRNTEltYWdlRWxlbWVudCB8IG51bGxcclxuXHQpIHtcclxuXHRcdGlmICh0aGlzLmlzRHJhZ2dpbmcgJiYgdXBkYXRlLmRvY0NoYW5nZWQpIHtcclxuXHRcdFx0Y29uc3QgaW1nRWxlbWVudCA9IHRoaXMuYWN0aXZlSW1nRWxlbWVudDsgLy8gVXNlIHRoZSBpbWFnZSBhY3RpdmUgYXQgZHJhZyBzdGFydFxyXG5cdFx0XHRpZiAoaW1nRWxlbWVudCAmJiAhZG9jdW1lbnQuYm9keS5jb250YWlucyhpbWdFbGVtZW50KSkge1xyXG5cdFx0XHRcdC8vIGNvbnNvbGUubG9nKFwiXHU2MkQ2XHU2MkZEXHU0RTJEXHU3Njg0XHU1NkZFXHU3MjQ3XHU1MTQzXHU3RDIwXHU1REYyXHU0RUNFXHU2NTg3XHU2ODYzXHU0RTJEXHU3OUZCXHU5NjY0XHVGRjBDXHU5MUNEXHU3RjZFXHU2MkQ2XHU2MkZEXHU3MkI2XHU2MDAxXHUzMDAyXCIpO1xyXG5cdFx0XHRcdHRoaXMucmVzZXRTdGF0ZSgpO1xyXG5cdFx0XHR9IGVsc2UgaWYgKHRoaXMubGluZUluZm9BdERyYWdTdGFydCkge1xyXG5cdFx0XHRcdHRyeSB7XHJcblx0XHRcdFx0XHRjb25zdCBjdXJyZW50TGluZSA9IHRoaXMudmlldy5zdGF0ZS5kb2MubGluZUF0KFxyXG5cdFx0XHRcdFx0XHR0aGlzLmxpbmVJbmZvQXREcmFnU3RhcnQucG9zXHJcblx0XHRcdFx0XHQpO1xyXG5cdFx0XHRcdFx0aWYgKFxyXG5cdFx0XHRcdFx0XHRjdXJyZW50TGluZS50ZXh0ICE9PSB0aGlzLmxpbmVJbmZvQXREcmFnU3RhcnQubGluZVRleHRcclxuXHRcdFx0XHRcdCkge1xyXG5cdFx0XHRcdFx0XHQvLyBDb25zaWRlciBpZiByZXNldCBpcyBhbHdheXMgbmVlZGVkIG9yIGlmIGl0IGNhbiBhZGFwdFxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0gY2F0Y2ggKGUpIHtcclxuXHRcdFx0XHRcdHRoaXMucmVzZXRTdGF0ZSgpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cHVibGljIGRlc3Ryb3koKSB7XHJcblx0XHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIHRoaXMuaGFuZGxlRG9jdW1lbnRNb3VzZU1vdmUpO1xyXG5cdFx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgdGhpcy5oYW5kbGVEb2N1bWVudE1vdXNlVXApO1xyXG5cdFx0Ly8gY29uc29sZS5sb2coXCJJbWFnZVJlc2l6ZUNvbnRyb2xsZXIgZGVzdHJveWVkLlwiKTtcclxuXHR9XHJcbn1cclxuIiwgImltcG9ydCB7IEVkaXRvclZpZXcsIFZpZXdVcGRhdGUgfSBmcm9tIFwiQGNvZGVtaXJyb3Ivdmlld1wiO1xyXG5pbXBvcnQgeyBJbWFnZUhvdmVyQ29udHJvbGxlciB9IGZyb20gXCIuL2ltYWdlLWhvdmVyLWNvbnRyb2xsZXJcIjtcclxuaW1wb3J0IHsgSW1hZ2VSZXNpemVDb250cm9sbGVyIH0gZnJvbSBcIi4vaW1hZ2UtcmVzaXplLWNvbnRyb2xsZXJcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBJbWFnZUhvdmVyVmlld1BsdWdpbiB7XHJcblx0cHJpdmF0ZSBjb250ZW50RG9tOiBIVE1MRWxlbWVudDtcclxuXHRwcml2YXRlIGhvdmVyQ29udHJvbGxlcjogSW1hZ2VIb3ZlckNvbnRyb2xsZXI7XHJcblx0cHJpdmF0ZSByZXNpemVDb250cm9sbGVyOiBJbWFnZVJlc2l6ZUNvbnRyb2xsZXI7XHJcblxyXG5cdGNvbnN0cnVjdG9yKHByaXZhdGUgdmlldzogRWRpdG9yVmlldykge1xyXG5cdFx0dGhpcy5jb250ZW50RG9tID0gdmlldy5jb250ZW50RE9NO1xyXG5cclxuXHRcdHRoaXMucmVzaXplQ29udHJvbGxlciA9IG5ldyBJbWFnZVJlc2l6ZUNvbnRyb2xsZXIodmlldyk7XHJcblx0XHR0aGlzLmhvdmVyQ29udHJvbGxlciA9IG5ldyBJbWFnZUhvdmVyQ29udHJvbGxlcihcclxuXHRcdFx0dmlldyxcclxuXHRcdFx0dGhpcy5jb250ZW50RG9tLFxyXG5cdFx0XHR0aGlzLnJlc2l6ZUNvbnRyb2xsZXJcclxuXHRcdCk7XHJcblxyXG5cdFx0Ly8gQmluZCBtZXRob2RzIGZyb20gaG92ZXJDb250cm9sbGVyIGZvciBldmVudCBsaXN0ZW5lcnNcclxuXHRcdHRoaXMuaGFuZGxlQ29udGFpbmVyTW91c2VNb3ZlID1cclxuXHRcdFx0dGhpcy5ob3ZlckNvbnRyb2xsZXIuaGFuZGxlQ29udGFpbmVyTW91c2VNb3ZlLmJpbmQoXHJcblx0XHRcdFx0dGhpcy5ob3ZlckNvbnRyb2xsZXJcclxuXHRcdFx0KTtcclxuXHRcdHRoaXMuaGFuZGxlQ29udGFpbmVyTW91c2VMZWF2ZSA9XHJcblx0XHRcdHRoaXMuaG92ZXJDb250cm9sbGVyLmhhbmRsZUNvbnRhaW5lck1vdXNlTGVhdmUuYmluZChcclxuXHRcdFx0XHR0aGlzLmhvdmVyQ29udHJvbGxlclxyXG5cdFx0XHQpO1xyXG5cclxuXHRcdHRoaXMuY29udGVudERvbS5hZGRFdmVudExpc3RlbmVyKFxyXG5cdFx0XHRcIm1vdXNlbW92ZVwiLFxyXG5cdFx0XHR0aGlzLmhhbmRsZUNvbnRhaW5lck1vdXNlTW92ZVxyXG5cdFx0KTtcclxuXHRcdHRoaXMuY29udGVudERvbS5hZGRFdmVudExpc3RlbmVyKFxyXG5cdFx0XHRcIm1vdXNlbGVhdmVcIixcclxuXHRcdFx0dGhpcy5oYW5kbGVDb250YWluZXJNb3VzZUxlYXZlXHJcblx0XHQpO1xyXG5cdH1cclxuXHJcblx0Ly8gQm91bmQgbWV0aG9kcyBmb3IgZXZlbnQgbGlzdGVuZXJzIHRvIGVuc3VyZSBgdGhpc2AgY29udGV4dFxyXG5cdHByaXZhdGUgaGFuZGxlQ29udGFpbmVyTW91c2VNb3ZlOiAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHZvaWQ7XHJcblx0cHJpdmF0ZSBoYW5kbGVDb250YWluZXJNb3VzZUxlYXZlOiAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHZvaWQ7XHJcblxyXG5cdHVwZGF0ZSh1cGRhdGU6IFZpZXdVcGRhdGUpIHtcclxuXHRcdHRoaXMucmVzaXplQ29udHJvbGxlci51cGRhdGUoXHJcblx0XHRcdHVwZGF0ZSxcclxuXHRcdFx0dGhpcy5ob3ZlckNvbnRyb2xsZXIuZ2V0TGFzdEhvdmVyZWRJbWcoKVxyXG5cdFx0KTtcclxuXHR9XHJcblxyXG5cdGRlc3Ryb3koKSB7XHJcblx0XHR0aGlzLmNvbnRlbnREb20ucmVtb3ZlRXZlbnRMaXN0ZW5lcihcclxuXHRcdFx0XCJtb3VzZW1vdmVcIixcclxuXHRcdFx0dGhpcy5oYW5kbGVDb250YWluZXJNb3VzZU1vdmVcclxuXHRcdCk7XHJcblx0XHR0aGlzLmNvbnRlbnREb20ucmVtb3ZlRXZlbnRMaXN0ZW5lcihcclxuXHRcdFx0XCJtb3VzZWxlYXZlXCIsXHJcblx0XHRcdHRoaXMuaGFuZGxlQ29udGFpbmVyTW91c2VMZWF2ZVxyXG5cdFx0KTtcclxuXHJcblx0XHR0aGlzLmhvdmVyQ29udHJvbGxlci5kZXN0cm95KCk7XHJcblx0XHR0aGlzLnJlc2l6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
